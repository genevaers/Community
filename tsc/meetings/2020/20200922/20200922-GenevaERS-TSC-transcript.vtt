WEBVTT

1
00:03:20.310 --> 00:03:21.030
Ian: looks dark right

2
00:03:22.290 --> 00:03:22.800
Kip Twitchell: Well,

3
00:03:25.260 --> 00:03:25.500
Yeah.

4
00:03:30.870 --> 00:03:32.940
Kip Twitchell: We are we are on that side of the sun.

5
00:03:36.180 --> 00:03:40.680
Ian: Today is a beautiful sunny day here going to be 30 degrees here tomorrow.

6
00:03:44.280 --> 00:03:45.780
Kip Twitchell: It doesn't translate so well in

7
00:03:47.910 --> 00:03:49.500
Ian: 30s or

8
00:03:49.950 --> 00:03:58.410
Kip Twitchell: 90 some things to know 30 degrees via well but 30 degrees. To me, it's going to be to two degrees below zero. That's, that's a little bit cold.

9
00:04:01.290 --> 00:04:02.040
Ian: Yeah.

10
00:04:04.590 --> 00:04:06.480
Ian: It's just because you guys use the wrong scale.

11
00:04:06.510 --> 00:04:08.670
Kip Twitchell: Yeah, well, it is a goofy scale is

12
00:04:10.500 --> 00:04:13.200
Kip Twitchell: Where did it come from, who plan that scale.

13
00:04:14.280 --> 00:04:18.180
Ian: Mr Fahrenheit for you. It's the freezing point of zeros. The

14
00:04:19.980 --> 00:04:21.000
Ian: someone to tell me

15
00:04:22.080 --> 00:04:23.070
Kip Twitchell: Oh, is it, yo.

16
00:04:25.200 --> 00:04:30.030
Ian: It's the same is his body temperature 37

17
00:04:31.470 --> 00:04:33.060
Ian: And the minuses.

18
00:04:34.170 --> 00:04:35.310
Kip Twitchell: Zero is what

19
00:04:36.930 --> 00:04:38.550
Ian: The freezing point of something

20
00:04:41.400 --> 00:04:42.450
Ian: Obviously, something

21
00:04:45.660 --> 00:04:46.290
Ian: To the garden.

22
00:04:47.370 --> 00:04:54.600
Kip Twitchell: It's obvious. Yeah. No, it's something comes to mind very easily, but it was a great, great benchmark for zero there you

23
00:04:58.050 --> 00:04:58.350
Know,

24
00:05:00.900 --> 00:05:01.950
Ian: I'm just looking it up.

25
00:05:03.270 --> 00:05:05.670
Kip Twitchell: Wow. Isn't it amazing what

26
00:05:05.910 --> 00:05:08.670
Ian: Was it 60 and 86

27
00:05:12.060 --> 00:05:13.230
Ian: It was created.

28
00:05:16.920 --> 00:05:19.650
Kip Twitchell: You know, I have a very interesting book about this in

29
00:05:21.300 --> 00:05:24.870
Ian: The water is 32 degrees. Yeah, yeah. The zoo.

30
00:05:25.410 --> 00:05:27.870
Kip Twitchell: So this book is the measure of reality.

31
00:05:29.070 --> 00:05:44.910
Kip Twitchell: This guy Alfred W Crosby, he talked about making quanta how Western Europe was very good at measuring things like making train temperatures starting to measure temperatures, it's a it's a very interesting

32
00:05:46.200 --> 00:05:46.920
Book. Uh huh.

33
00:05:51.960 --> 00:05:52.230
Kip Twitchell: Okay.

34
00:05:52.290 --> 00:06:00.300
Ian: The original paper suggest the law defining point zero was established as the freezing temperature of a solution of Brian

35
00:06:02.850 --> 00:06:05.040
Ian: Because that would be obvious, wouldn't it

36
00:06:05.250 --> 00:06:08.520
Kip Twitchell: Yeah, that would be easily measurable anywhere.

37
00:06:08.670 --> 00:06:09.570
Wonder what yeah

38
00:06:10.800 --> 00:06:13.740
Ian: It's sold yeah salty water. Yeah, so I

39
00:06:14.760 --> 00:06:18.990
Ian: Made of a mixture of water ice and ammonium chloride.

40
00:06:19.080 --> 00:06:21.750
Kip Twitchell: There you go. Yes, that's what I would choose

41
00:06:21.840 --> 00:06:23.640
Kip Twitchell: For yeah my base.

42
00:06:27.930 --> 00:06:28.620
Ian: That's

43
00:06:28.770 --> 00:06:30.600
Ian: Where did they get that from

44
00:06:32.400 --> 00:06:34.800
Kip Twitchell: Well, if anyone joins our call early

45
00:06:35.820 --> 00:06:38.520
Kip Twitchell: They'll know we're kind of geeks, aren't they, it's

46
00:06:38.550 --> 00:06:43.200
Ian: Yeah, it's a bit like I rose remember it school learning about

47
00:06:45.270 --> 00:06:49.290
Ian: That wind dimension of wind in storms. What's that one called

48
00:06:50.730 --> 00:06:55.200
Kip Twitchell: Not, not the not the tornadoes the F that something else.

49
00:06:55.710 --> 00:06:56.940
Ian: The the

50
00:06:58.410 --> 00:07:00.180
Ian: The scale wind

51
00:07:00.300 --> 00:07:01.650
Kip Twitchell: Yeah, maybe that's a

52
00:07:03.150 --> 00:07:04.140
Ian: Win Win.

53
00:07:10.890 --> 00:07:11.670
Kip Twitchell: Solution.

54
00:07:14.970 --> 00:07:16.530
Kip Twitchell: Well, this stuff that I held them off.

55
00:07:16.530 --> 00:07:18.780
Ian: at scale. That's what it's called the buffet scale.

56
00:07:19.050 --> 00:07:21.420
Ian: The buffet buffet.

57
00:07:22.470 --> 00:07:22.830
Ian: Yeah.

58
00:07:25.110 --> 00:07:27.720
Ian: Yeah, that's equally tuft as well.

59
00:07:29.790 --> 00:07:31.260
Ian: Zero to 12

60
00:07:31.740 --> 00:07:35.280
Ian: Hurricane forces 12 zero is calm.

61
00:07:36.930 --> 00:07:44.790
Ian: Five is a fresh breeze six is a strong breeze for is just a moderate breeze.

62
00:07:46.860 --> 00:07:49.080
Ian: Madrid was higher than fresh but there you go.

63
00:07:49.410 --> 00:07:55.560
Kip Twitchell: I can see Mr. Mr Fahrenheit. Well, this stuff. I left in the sink. Last night froze. So let's use that as our

64
00:07:57.300 --> 00:07:59.790
Ian: Wow, where are you, you're in Dallas, when you

65
00:08:00.150 --> 00:08:02.670
Kip Twitchell: Live in Dallas. Dallas.

66
00:08:03.030 --> 00:08:04.560
Ian: Didn't look on that cool down there.

67
00:08:04.980 --> 00:08:08.340
Kip Twitchell: No, it doesn't really know I'm saying, Mr Fahrenheit. That's what

68
00:08:09.360 --> 00:08:11.250
Kip Twitchell: Whatever happened to be in sync that night.

69
00:08:11.370 --> 00:08:12.390
Ian: That for, you know, yeah.

70
00:08:13.530 --> 00:08:18.270
Ian: Yeah, so it's the fresh scale nine is a strong Gail

71
00:08:19.530 --> 00:08:26.400
Ian: 10 is a whole gills storm. Oh, and 11 isn't violent storm. Yeah.

72
00:08:29.970 --> 00:08:30.630
Ian: Yeah.

73
00:08:32.580 --> 00:08:34.080
GillianHannington: I am chill just joined

74
00:08:34.590 --> 00:08:35.490
Ian: The judge will

75
00:08:35.940 --> 00:08:40.140
Kip Twitchell: Thank you for Frankie for breaking up the dialogue here between

76
00:08:43.380 --> 00:08:45.570
Kip Twitchell: Scale scales in the world when

77
00:08:45.630 --> 00:08:46.140
Ian: We were

78
00:08:46.200 --> 00:08:52.920
Ian: We were wondering where Fahrenheit came from zero is the freezing point of some Brian

79
00:08:53.670 --> 00:08:54.600
Kip Twitchell: Brian mixture.

80
00:08:56.550 --> 00:09:01.290
Ian: And then I got onto other daft skills like the perfect skill, the wind, we are

81
00:09:02.820 --> 00:09:06.480
Ian: Learning English school schema, but do lots of

82
00:09:06.510 --> 00:09:10.410
GillianHannington: Vaguely. Um, yeah, probably didn't pay much attention in geography lessons.

83
00:09:13.110 --> 00:09:21.690
Ian: Because they've got such such definitive terms like Buffett skill five as a fresh breeze is fresh for six as a strong breeze.

84
00:09:24.030 --> 00:09:26.580
Ian: But anyway, I digress. I've

85
00:09:26.640 --> 00:09:27.870
Ian: Probably gone. Yeah.

86
00:09:27.930 --> 00:09:29.820
Kip Twitchell: That's getting there. So,

87
00:09:29.880 --> 00:09:47.550
Kip Twitchell: In next next month, next time before the meeting. We're going to talk about the best sounding words and I'm least like sounding words which is a list that I can give you some insight and that's that's for next time anyone that wants to tune in early for the end and kip show

88
00:09:48.030 --> 00:09:50.820
Kip Twitchell: Joining early before because the

89
00:09:52.110 --> 00:09:53.790
Kip Twitchell: First of meaningless discussion.

90
00:09:57.360 --> 00:09:58.080
Ian: Meeting. This is

91
00:09:59.610 --> 00:10:13.380
Kip Twitchell: Excellent, excellent. I see Randall has joined McCormick Sandy. It's good to see you. Jeff's here we have someone on the phone to one for number, welcome.

92
00:10:14.250 --> 00:10:15.090
12147897853: To that person.

93
00:10:16.380 --> 00:10:19.710
12147897853: Yeah, that's me. I haven't got zoomed up yet and

94
00:10:21.000 --> 00:10:22.860
12147897853: I joined us by voice.

95
00:10:22.980 --> 00:10:23.550
12147897853: We're glad

96
00:10:23.790 --> 00:10:26.430
Kip Twitchell: We're glad to have your voice, Neil. That's great.

97
00:10:27.240 --> 00:10:28.980
Ian: It's also the zoom scale them.

98
00:10:32.550 --> 00:10:33.990
Kip Twitchell: ruined our meeting already

99
00:10:34.110 --> 00:10:34.500
Randall Ness: Thank you.

100
00:10:37.560 --> 00:10:46.410
Kip Twitchell: Well, we're two minutes past which is not bad starting time. And today, Randall is going to kick us off with our good thought.

101
00:10:46.860 --> 00:10:56.910
Kip Twitchell: Our gratitude moment or in insightful. What we're what's good happened in the world since our last TASC so I think we're ready to begin. If we're if everybody's okay

102
00:10:59.310 --> 00:11:00.150
Kip Twitchell: Randall over to you.

103
00:11:01.170 --> 00:11:02.250
Randall Ness: Can you hear me okay

104
00:11:02.610 --> 00:11:03.750
Kip Twitchell: Yeah, I can hear you just fine.

105
00:11:04.110 --> 00:11:07.080
Randall Ness: Yeah okay so let's see my opening thought

106
00:11:08.370 --> 00:11:14.670
Randall Ness: Is a quote from science fiction writer Isaac Asimov

107
00:11:15.750 --> 00:11:20.160
Randall Ness: And he said, he said the most exciting phrase to hear in science.

108
00:11:21.300 --> 00:11:26.550
Randall Ness: The one that heralds new discoveries is not Eureka, but that's funny.

109
00:11:30.750 --> 00:11:47.760
Randall Ness: And the reason I bring that up is that okay this last week I just found out that a certain banking customer of ours is achieving significant CPU savings because of something that I saw a couple years ago when I was looking at various

110
00:11:51.270 --> 00:12:01.980
Randall Ness: Application performance analyzer reports of runs to try to figure out where it CPU time was going. And I was noticing that the CPU time was being burnt up in a lot of different spots in the

111
00:12:02.520 --> 00:12:12.690
Randall Ness: In various programs, but all of them had to do with one machine language instruction called execute. And so I thought, that's funny.

112
00:12:13.800 --> 00:12:23.910
Randall Ness: So I pursued that and kept talking to folks and found out that that actually was kind of an expensive instruction. So we figured out some ways of avoiding that instruction and had some CPU savings but

113
00:12:24.780 --> 00:12:42.150
Randall Ness: I think I guess my message for everybody is you can be trying to find a discovery and and not find it. But if you just happen to look at data look for patterns. Sometimes you'll see something that just pops out at you. So that's my, that's my Thought for the Day. That's

114
00:12:42.210 --> 00:12:56.970
Kip Twitchell: That's a great start to our meeting. Thanks, Randall, and it's a soft congratulations on on pursuing that too and getting to success. That's, that's good for for all of us that we have success in our, in our work in Geneva DRS world. Okay.

115
00:12:58.470 --> 00:13:01.320
Kip Twitchell: I think I'm going to share for just a minute here.

116
00:13:02.340 --> 00:13:07.020
Kip Twitchell: Host sharing host disable attendee sharing screen. I don't know who's the host

117
00:13:09.420 --> 00:13:09.870
Kip Twitchell: The host

118
00:13:11.250 --> 00:13:16.380
So maybe I'm not going to share because maybe I should check on that.

119
00:13:21.780 --> 00:13:22.890
Can you tell us

120
00:13:25.170 --> 00:13:25.590
Kip Twitchell: Well,

121
00:13:26.640 --> 00:13:30.870
Kip Twitchell: Gosh, we'd like to share tonight in some way. It seems a little

122
00:13:32.160 --> 00:13:38.040
Kip Twitchell: Maybe I could have joined. I didn't join us host. Maybe I need to

123
00:13:39.300 --> 00:13:40.230
Kip Twitchell: Do that.

124
00:13:40.830 --> 00:13:46.110
andrea orth: If you go to the bottom right corner and click on the three dots. Does it have claim host

125
00:13:47.220 --> 00:13:48.000
andrea orth: For you on

126
00:13:48.120 --> 00:13:50.640
Kip Twitchell: Bottom right i do have claim Austin. I do.

127
00:13:52.200 --> 00:13:55.380
Kip Twitchell: Okay. Enter host key.

128
00:13:56.400 --> 00:13:57.900
Kip Twitchell: Or login to claim.

129
00:13:59.940 --> 00:14:01.710
Kip Twitchell: Is coming. Thank you.

130
00:14:09.300 --> 00:14:14.640
Kip Twitchell: Okay, maybe while I'm doing that. The next agenda item is going to turn it over to Sandy.

131
00:14:15.960 --> 00:14:16.830
Kip Twitchell: We had the

132
00:14:18.120 --> 00:14:27.330
Kip Twitchell: We joined. We were active participants last week in the summit and Sandy was going to kind of give us an update on that talk about our community outreach and

133
00:14:28.350 --> 00:14:34.260
Kip Twitchell: Just got a lot of activity. We have a number of good meetings today very active sandy UK given us an update.

134
00:14:36.270 --> 00:14:38.070
Kip Twitchell: Your kind of quiet sandy every time you

135
00:14:43.200 --> 00:14:43.800
Sandy: There we go.

136
00:14:43.980 --> 00:14:46.260
Sandy: There we go. Can you hear me now. Yep.

137
00:14:46.290 --> 00:14:47.220
Sandy: Gotcha. Okay.

138
00:14:48.270 --> 00:14:49.890
Sandy: I guess I probably was really quiet.

139
00:14:51.180 --> 00:14:55.140
Sandy: Slides to share. However, since I can't get any content.

140
00:14:55.740 --> 00:14:58.230
Kip Twitchell: Let me, let me get logged in, but you go ahead and see

141
00:15:02.880 --> 00:15:04.590
Kip Twitchell: Can you talk for just a minute while I'm doing

142
00:15:04.590 --> 00:15:04.860
Sandy: Here.

143
00:15:04.890 --> 00:15:05.580
Kip Twitchell: And we'll get to you.

144
00:15:06.000 --> 00:15:16.980
Sandy: Sure, let's start with the inaugural open mainframe summit three of us attended. It was kip Randall and myself. I don't know if anybody else happened to attend, but

145
00:15:17.640 --> 00:15:25.680
Sandy: I thought it was really a great summit, it was September 16 and 17th, which was two days of presentations and discussions.

146
00:15:26.250 --> 00:15:34.530
Sandy: There are session videos out on the open mainframe project YouTube channel all of the all of the pieces. Aren't there.

147
00:15:35.370 --> 00:15:44.310
Sandy: Yet I don't know if they all are going to be like the chat, man. I was talking about. And one of our Scrum meetings, it's not there, but

148
00:15:45.180 --> 00:15:59.220
Sandy: You know, a number of the videos are there. So you can go out by looking for open mainframe project YouTube and sorry my looking for the open mainframe project on YouTube. You can see some of the presentations.

149
00:15:59.820 --> 00:16:08.340
Sandy: All right. One of the things that skip it mentioned was was we really took a mmm

150
00:16:11.520 --> 00:16:13.380
Sandy: Hmm, okay. Um,

151
00:16:14.610 --> 00:16:17.970
Sandy: It just showed that open mainframe project community was the host

152
00:16:18.420 --> 00:16:20.220
Sandy: Did you see I logged in.

153
00:16:20.340 --> 00:16:26.160
Open Mainframe Project Community: This is kicking back and I can allow now to share, Andy, so I will give you

154
00:16:28.260 --> 00:16:28.890
Open Mainframe Project Community: Just a moment.

155
00:16:33.870 --> 00:16:35.730
Sandy: Waters in front of the screen here.

156
00:16:37.980 --> 00:16:38.760
Open Mainframe Project Community: Co host

157
00:16:47.700 --> 00:16:48.660
Open Mainframe Project Community: Okay, I think you can share

158
00:16:49.980 --> 00:16:51.150
Hey, I can

159
00:16:52.260 --> 00:16:53.190
Sandy: Just go. There we go.

160
00:16:56.130 --> 00:16:56.310
Oh,

161
00:17:02.010 --> 00:17:03.030
Sandy: There we go. Got it.

162
00:17:04.530 --> 00:17:05.220
Open Mainframe Project Community: Very good. Thanks.

163
00:17:06.660 --> 00:17:17.160
Sandy: Um, so one of the things that Kip, and I tried to do specifically and Randall, you may have tried also was to, you know, really hit the mix and mingle.

164
00:17:18.330 --> 00:17:30.120
Sandy: For people that came in and and put their names out there. We attempted to start conversations with them. This resulted in at least two people joining Geneva year us

165
00:17:30.750 --> 00:17:34.500
Sandy: One bomb but the name of Fatima and another one by the name wipe out

166
00:17:35.310 --> 00:17:48.030
Sandy: Tomorrow I'm going to have a meeting at 10am Eastern I've invited both of them to the meeting. And we'll go over some of the some of the pieces of Geneva year. So if people have any questions that they have any questions and stuff like that.

167
00:17:48.840 --> 00:18:06.420
Sandy: So that is 10am Eastern if anybody wants to join just just, you know, give me a ping on Slack on but this was all through slack. I'm Fatima actually joined today and I reached out to her and you know she was all excited that someone would reach out to her and

168
00:18:07.770 --> 00:18:14.580
Sandy: Stuff. So, um, I think one of the things that we were trying to do with this was to get

169
00:18:15.780 --> 00:18:19.260
Sandy: Some more engagement in the in the

170
00:18:21.570 --> 00:18:35.430
Sandy: In the area that we, that we are looking for work. Um, we also had an invitation by Zoe to their TASC which Randall, and I attended today.

171
00:18:36.660 --> 00:18:53.550
Sandy: Unfortunately, um, you know, they went over a proposal for for pretty much all of the meeting. However, the proposal was awesome. I mean, I don't know, Randall what what you thought about that, but I reached out to jack

172
00:18:55.020 --> 00:19:03.360
Sandy: Jai I'm and got the proposal. So I have a copy of it and it goes over all sorts of things.

173
00:19:04.410 --> 00:19:10.890
Sandy: Like, um, when they're trying to do a proposal. Some of the things aren't well actually I have it right here.

174
00:19:12.330 --> 00:19:13.470
Sandy: Am I still sharing. No.

175
00:19:15.060 --> 00:19:15.990
Sandy: I'm like, Okay.

176
00:19:16.680 --> 00:19:18.450
Open Mainframe Project Community: We can see high availability zone.

177
00:19:18.690 --> 00:19:18.900
Yeah.

178
00:19:20.130 --> 00:19:23.610
Sandy: So they went over this high availability of zero, but they talked about

179
00:19:24.540 --> 00:19:38.670
Sandy: You know all of the, what are they doing, and then they talked about where does you know fail over. And they talked about high scalability estimated workload running on a single CEOs on parallel simplex

180
00:19:39.090 --> 00:19:45.630
Sandy: I mean, there was all this stuff that I think we're probably going to have to deal with when we talk about our stuff.

181
00:19:46.320 --> 00:19:54.420
Sandy: They also had an implementation plan how to configure it, and all of the work that needs to be done. Now obviously ours isn't going to be the same but

182
00:19:55.110 --> 00:20:09.210
Sandy: All of these things that we have to think about. I think it's probably useful to have this outline to make sure that we're that we're thinking about all these things and we have it documented so people can understand what we're trying to do.

183
00:20:11.160 --> 00:20:18.810
Sandy: But that was just a that was just a that came out of the THC Randy, did you, did you have any, um, any other thoughts on that.

184
00:20:19.050 --> 00:20:27.030
Randall Ness: Well, I just was very impressed. I thought it was it obviously these guys are serious software engineers and

185
00:20:28.290 --> 00:20:30.750
Randall Ness: It was very, very formal very

186
00:20:32.520 --> 00:20:43.350
Randall Ness: Professional. It just seemed very professional to me. And so I was impressed and I'd like to see us achieve the same amounts of Professionalism. Professionalism. Professionalism. Yes.

187
00:20:44.400 --> 00:20:44.820
Sandy: Yeah, I

188
00:20:45.540 --> 00:20:59.430
Sandy: Agree was really I'm attending if I if I don't have any conflicts to attend the meeting. Again, I think there's only once a month, though I'm not mistaken. Did you did you catch that.

189
00:20:59.520 --> 00:21:02.070
Randall Ness: I thought it was weekly but I could have gotten them.

190
00:21:02.700 --> 00:21:04.500
Sandy: Okay, I could be wrong.

191
00:21:04.770 --> 00:21:11.460
Open Mainframe Project Community: I think and I thought that it was more of the architecture meeting, not necessarily their steering committee. I'm not sure if that

192
00:21:11.490 --> 00:21:19.440
Randall Ness: Is true, true. This was the architecture meeting there are there, they have have a whole series of meetings they have the steering committee meeting that

193
00:21:19.950 --> 00:21:21.990
Randall Ness: We do to other meetings. Yeah, I guess I

194
00:21:22.470 --> 00:21:25.980
Open Mainframe Project Community: Love the TLC. And we have the infrastructure meeting right after the TLC for

195
00:21:26.250 --> 00:21:28.140
Randall Ness: We go. There we go. Okay.

196
00:21:30.180 --> 00:21:31.440
Sandy: So I'll fix that.

197
00:21:33.000 --> 00:21:37.920
Sandy: That's not the CSC architecture, meaning. So, and it was very, it was very interesting.

198
00:21:38.430 --> 00:21:47.880
Sandy: I got I got into a discussion with jack, but that's another story. I'm just about different different things and different questions that I had about the thing, but I haven't

199
00:21:48.180 --> 00:21:54.180
Sandy: Haven't really read it would be interesting just to read it to see what he's what he's talking about because he went through a pretty quick.

200
00:21:54.480 --> 00:22:04.200
Sandy: They had already reviewed at once. So he just reviewed the changes. So anybody wants that I went to the copy or I've got the link, you can go out and take a look.

201
00:22:05.430 --> 00:22:12.780
Sandy: Okay, second one, um, you know, so he can help us. I'm just from our

202
00:22:13.830 --> 00:22:22.890
Sandy: Perspective, you know, Kip asked me to talk a little bit about, you know, they have a command line interface on which is a core set of commands for working with data sets jazz.

203
00:22:24.330 --> 00:22:33.720
Sandy: Issuing to sell and console commands. So we application framework, which is a web UI that does that emulates a 30 to 70 terminal and

204
00:22:34.680 --> 00:22:37.860
Sandy: You know, allows you to work with MPs data sets, things like that.

205
00:22:38.850 --> 00:22:50.100
Sandy: They have an API mediation layer which that mediation layer contains a catalog of REST APIs and a framework for single sign on. So there's an awful lot of, um,

206
00:22:50.790 --> 00:23:03.990
Sandy: You know items that it seems like we're probably might have to have to take advantage of or, you know, there could be a KNOW THAT ONE OF THE REST API's they have actually as a connection to DB too so

207
00:23:04.740 --> 00:23:15.840
Sandy: There could be a lot of stuff that we need to to really take a look at and see, make sure we're not reinventing the wheel and and we can make use of some of the stuff they've already have out there.

208
00:23:16.950 --> 00:23:18.570
Sandy: Any, any other thoughts on that.

209
00:23:19.410 --> 00:23:30.030
Open Mainframe Project Community: Kit, because you will. I think you're doing great. And let me just say Sandy's you know we've we've asked Sandy to be focusing on our open source integration from the junior year or his project.

210
00:23:30.360 --> 00:23:40.260
Open Mainframe Project Community: I'm Sandy. This is just exactly what we need is broadening and connecting us to other parts of open source, so. Excellent. Thanks for for this information. It's great.

211
00:23:41.310 --> 00:23:48.210
Sandy: Okay. And then the last part. You asked me to talk about maybe you don't want to do this right now, but I'm

212
00:23:49.500 --> 00:24:10.890
Sandy: Getting people engaged is the first step, as suggested in the summer with the summit contact that we had and we created an issue out there in issues under the PLC. And what we're looking for is input from others what the first issues is is a the bus.

213
00:24:12.090 --> 00:24:23.880
Sandy: Smaller issue that people can start getting engaged. All right, things that that they can probably help out with without really knowing a lot about Geneva.

214
00:24:24.780 --> 00:24:33.360
Sandy: And you know the whole project, but they can get their feet wet and and you know work toward you know really getting involved.

215
00:24:34.110 --> 00:24:49.380
Sandy: So I think that kip you wanted to talk about, you know, really have a roundhouse discussion on, you know, what are some of the things we can look at, because I am having that meeting tomorrow with hopefully Fatima and definitely why

216
00:24:50.550 --> 00:24:53.850
Sandy: And I'd like to point them to something to saying here's what we think

217
00:24:54.570 --> 00:25:03.780
Open Mainframe Project Community: Ya know, so that's good. So we're looking for is your team, we're going to open it up. We're going to pause here for a moment. It's going to be quiet and we're going to look for someone besides

218
00:25:05.010 --> 00:25:12.870
Open Mainframe Project Community: Sandy and Meteor Randall to be commenting. We're looking for how somebody who's brand new, they can get involved and we want to

219
00:25:13.770 --> 00:25:23.520
Open Mainframe Project Community: Kind of and and what they could do to help us in some way. I think this point of it's quite common. I guess in open source projects we understand

220
00:25:24.000 --> 00:25:36.300
Open Mainframe Project Community: For there to be something called good first issues as an outstanding issue in a project that people can search for and that gives them a starting point for something that they can do to contribute to the community.

221
00:25:37.350 --> 00:25:44.610
Open Mainframe Project Community: Any ideas on where somebody could dip their toe into helping us in some way.

222
00:25:51.240 --> 00:25:52.860
andrea orth: You know what you're experiencing.

223
00:25:54.990 --> 00:26:03.900
Open Mainframe Project Community: I think we could. No, I don't think we'll see a good question. Andrew you're talking the discussion we're going to have with these two individuals tomorrow good first issues. I think it has to assume

224
00:26:04.590 --> 00:26:13.830
Open Mainframe Project Community: Various types of things. So you can. It doesn't have to be a single issue. It's a kind of a list of possible things that they could be involved with with possible experiences.

225
00:26:16.740 --> 00:26:20.340
Open Mainframe Project Community: So I think we're looking for broad set of ideas.

226
00:26:23.010 --> 00:26:24.990
andrea orth: Or anything on the TLC checklist.

227
00:26:26.010 --> 00:26:27.960
andrea orth: That somebody could do somebody new could do

228
00:26:28.950 --> 00:26:40.200
Open Mainframe Project Community: So one thing we have on the TLC checklist is the is the infrastructure pieces we have the release, we still need the release document as well.

229
00:26:43.020 --> 00:26:46.980
Open Mainframe Project Community: I don't know if there's anything that someone could contribute around that.

230
00:27:09.330 --> 00:27:24.390
Open Mainframe Project Community: You know, one thing that I think we could have them sandy just from our perspective, we're trying to integrate here with other tools. We could have them do a bit of research, for example for us on I soda, which is the the spark.

231
00:27:26.670 --> 00:27:27.330
Open Mainframe Project Community: Tulane

232
00:27:28.440 --> 00:27:29.730
Open Mainframe Project Community: ICO da

233
00:27:29.820 --> 00:27:31.050
Sandy: Da I can get me.

234
00:27:31.560 --> 00:27:33.180
Open Mainframe Project Community: I'm not sure about a DA.

235
00:27:33.420 --> 00:27:34.800
Randall Ness: Vinci. Yeah.

236
00:27:37.980 --> 00:27:38.640
Open Mainframe Project Community: So,

237
00:27:41.760 --> 00:27:51.930
Open Mainframe Project Community: They could come back and give us a bit of they could think of to a drill down on that because I don't think our team knows a lot about Isaiah, they could just come back to us with some

238
00:27:52.680 --> 00:28:01.020
Open Mainframe Project Community: With the various short set of the discussions around what is a soda. What are the main features of it and and how would somebody use it.

239
00:28:08.520 --> 00:28:13.590
GillianHannington: I was going to say and do we have a full plan about how we're gonna

240
00:28:15.930 --> 00:28:19.770
GillianHannington: From integrate with GitHub regarding like an automated builds know

241
00:28:20.820 --> 00:28:24.180
Open Mainframe Project Community: That would be another place. That's excellent. Julian because

242
00:28:26.580 --> 00:28:35.100
Open Mainframe Project Community: I don't know, Bob, if there's something that somebody. There's a number of pieces. Bob that we're supposed to have from the infrastructure side of the FOSS

243
00:28:36.270 --> 00:28:43.290
Open Mainframe Project Community: FOSS I think it is components. Is there some research that people could come back and help us with on those things. But

244
00:28:45.360 --> 00:28:46.380
bobmcCormack: Yes. I mean, we

245
00:28:47.220 --> 00:28:49.860
bobmcCormack: Were always open to new ideas and

246
00:28:50.670 --> 00:28:51.390
To be honest,

247
00:28:52.950 --> 00:29:18.420
bobmcCormack: The build process can occur in multiple ways our current thinking moment is is towards grateful Groovy and Zoe see ally. But that's not to say that any other arrangement, possibly with different Zoe plugins, rather than command line. So it's, it's a, an area that could change.

248
00:29:19.620 --> 00:29:20.070
Yeah.

249
00:29:22.800 --> 00:29:29.130
Open Mainframe Project Community: How would we, how would we structure something for them. You know what, what would we ask them.

250
00:29:30.870 --> 00:29:36.030
Open Mainframe Project Community: To do it. Let's assume, let's assume here for a moment. But for that one.

251
00:29:37.140 --> 00:29:43.230
Open Mainframe Project Community: That they they have some familiarity with a Z on they have access to some sort of z system.

252
00:29:44.400 --> 00:29:51.720
Open Mainframe Project Community: What is there is there a small piece of something they could connect together in that space. That would be helpful to us.

253
00:29:53.520 --> 00:29:59.820
bobmcCormack: Well, we have a small Rei pro in SAFA the GV be live

254
00:30:00.210 --> 00:30:05.820
bobmcCormack: Yes, and prizes and, you know, eight or nine parts and producers to load modules.

255
00:30:07.620 --> 00:30:14.190
bobmcCormack: That's what we're currently using for our testbed to prove a process of automated builds

256
00:30:16.050 --> 00:30:18.150
bobmcCormack: So that could provide a

257
00:30:19.440 --> 00:30:22.710
bobmcCormack: A source for somebody just say, well, is

258
00:30:23.850 --> 00:30:30.240
bobmcCormack: The parts. Here's how they put together what process would you think it'd be best to automate a build of that.

259
00:30:30.930 --> 00:30:34.350
Open Mainframe Project Community: That's excellent. That's it. That's very tangible, isn't it. I like that.

260
00:30:35.580 --> 00:30:49.350
Open Mainframe Project Community: It presumes that there can be some level. Another place Andrew that I go, is it and I don't know if if we have Eugene on. Is there something around documentation. We're still kind of waiting on some level of documentation.

261
00:30:51.300 --> 00:31:09.540
Open Mainframe Project Community: But we've got the training videos out there is, there are some materials that would be useful, from what we have in terms of the training videos that we could someone who comes in, without technical skills that might have other kinds of web or skills that would be useful to us.

262
00:31:11.910 --> 00:31:19.170
andrea orth: And their motor skills is a different idea. They could start researching the stuff on the badge.

263
00:31:21.000 --> 00:31:27.090
andrea orth: Checklist stat expands dynamic scans. I mean, some that would feed into the automation.

264
00:31:28.050 --> 00:31:29.010
Open Mainframe Project Community: Yes, all the

265
00:31:29.130 --> 00:31:33.600
Open Mainframe Project Community: Security yesterday scans that would be another place that we could use help, couldn't it

266
00:31:34.830 --> 00:31:47.340
Open Mainframe Project Community: You know where you're going, Andrew, what you just said there people coming in may come from more of an open source community background, which means they bring that sort of knowledge to us where we don't have that right. Yeah.

267
00:31:51.150 --> 00:31:52.050
Open Mainframe Project Community: That's an excellent idea.

268
00:31:57.450 --> 00:32:01.170
Open Mainframe Project Community: Sandy. What's your thoughts on this is this is this good is a good start here.

269
00:32:02.400 --> 00:32:15.240
Sandy: Um spires the automated build. I'm not sure what I mean. What can we point them to to tell them what we're trying to build because

270
00:32:16.440 --> 00:32:17.550
Sandy: I mean, I know.

271
00:32:18.810 --> 00:32:24.900
Sandy: Geneva, I worked with that for 15 years. Um, and I'm not even sure what

272
00:32:25.620 --> 00:32:33.360
Open Mainframe Project Community: So yeah, let me, let me say we'd be a little bit more specific. We have the the assembler code. So you're basically trying to run an assemble.

273
00:32:34.200 --> 00:32:46.710
Open Mainframe Project Community: To build a load module on the CLS is is what we would be looking to do. Now this is going to require somebody that knows z less coming involved with know how to do and assemble and link at it.

274
00:32:47.850 --> 00:32:55.590
Open Mainframe Project Community: I don't think if these are college students who are new to Z. That's not going to be something that they could, they could come to read

275
00:32:56.250 --> 00:32:59.310
Sandy: Well, I'm not sure, because a couple of them.

276
00:33:00.450 --> 00:33:07.800
Sandy: I think are in the empty an empty project master transaction.

277
00:33:07.890 --> 00:33:10.050
Open Mainframe Project Community: Or Master the Mainframe master. Yeah.

278
00:33:10.140 --> 00:33:14.760
Sandy: Mr the mainframe. Sorry. There was MTM Rebecca my old work.

279
00:33:17.100 --> 00:33:33.870
Sandy: And and they may be talking about certainly they're talking about Zoe, they're talking about VS code and stuff like that. Um, so they may have from that some level of expertise on doing some stuff, although I believe they're talking mostly

280
00:33:35.340 --> 00:33:36.270
Sandy: About

281
00:33:37.620 --> 00:33:52.560
Sandy: Cobra cobalt, although I think I actually signed up for it. So I can see what they're doing. Um, and I haven't gotten very far because I'm just, it just was today like today. Um, so they may have more than we think they have

282
00:33:52.860 --> 00:33:59.610
Sandy: And they really want to want to, you know, do something along that line, but so you want to run an assembler link.

283
00:33:59.910 --> 00:34:07.710
Open Mainframe Project Community: It's a, you have to assemble. It's a symbol. It's like in cobalt compile, but in the assembly assembly process. Right. And when Ganda

284
00:34:10.260 --> 00:34:11.760
Open Mainframe Project Community: Assembled on Lincoln Yep.

285
00:34:19.770 --> 00:34:20.100
Okay.

286
00:34:21.660 --> 00:34:23.040
Sandy: That's what you want to be build

287
00:34:23.100 --> 00:34:28.710
Open Mainframe Project Community: You know, another place, we could go sandy is you and I've been talking a lot about the hackathon.

288
00:34:29.370 --> 00:34:29.760
Sandy: Right.

289
00:34:30.720 --> 00:34:43.620
Open Mainframe Project Community: They could they could be coming back to us with suggestions around what could our focus for the hackathon for a hackathon be, what would the problem be that we would be trying to solve.

290
00:34:44.820 --> 00:34:48.300
Open Mainframe Project Community: You know, or the the the formation of that.

291
00:34:50.370 --> 00:35:03.750
Sandy: Yeah, I'm sure there's probably a couple of them have already been in hackathons. So, um, you know, they might have some some idea is to, you know, how we can proceed.

292
00:35:04.680 --> 00:35:21.810
Open Mainframe Project Community: Yeah. And if you just ask them to take their Master the Mainframe content and think about that in terms of the hackathon. That might be an interesting connection, they could make their is what would they do for Hackathon if somebody's been through Master the Mainframe course right

293
00:35:24.840 --> 00:35:25.140
Sandy: Yep.

294
00:35:26.490 --> 00:35:34.950
Open Mainframe Project Community: Let me. I think I might want to give a little context around that and we're Sandy and I are kind of driving as part of this community development.

295
00:35:36.330 --> 00:35:50.490
Open Mainframe Project Community: An idea of trying to run a hackathon people when they hear Geneva years running a hackathon, they think we're trying to do in Geneva year. So our senses were a little too light in terms of resources to run a hackathon on Geneva ers.

296
00:35:51.750 --> 00:36:04.470
Open Mainframe Project Community: So we're looking at a bit broader of trying to run a hackathon on CEOs and and use some of the new tooling, like the Docker on CEOs or a soda, so

297
00:36:05.130 --> 00:36:21.390
Open Mainframe Project Community: We're looking for, not necessarily a Geneva ERS hackathon. That's something we're proposing and asking if others want to be participants in to grow the community of open source, an activity that then we think may come and ball in our project more directly

298
00:36:24.870 --> 00:36:31.020
Open Mainframe Project Community: OK, so maybe that's some start there. Yep. Yep.

299
00:36:32.130 --> 00:36:36.720
Sandy: Let me if anybody else I'll throw this out in the in the

300
00:36:38.670 --> 00:36:39.600
Sandy: In the issues.

301
00:36:40.710 --> 00:36:52.980
Sandy: I'm comments and, you know, I'll talk to these tomorrow if anybody has any additional things, please throw them out in the comments. And, um,

302
00:36:55.530 --> 00:37:05.820
Sandy: You know, whatever thoughts you have around that, you know, we can also ask people to review things we have anything for them to review room from an editing standpoint.

303
00:37:06.270 --> 00:37:18.780
Sandy: You know, some some content or whatever. Um, you know that that you know doesn't make sense to them, you know, is it is it is it making any sense what we're trying to do, and things like that so

304
00:37:20.100 --> 00:37:23.910
Sandy: Um, that's also another another thought process there.

305
00:37:24.210 --> 00:37:24.630
Excellent.

306
00:37:26.370 --> 00:37:27.150
Open Mainframe Project Community: Sandy. Thank you.

307
00:37:27.720 --> 00:37:29.130
Open Mainframe Project Community: Okay, so

308
00:37:29.220 --> 00:37:37.920
Open Mainframe Project Community: Sandy, bam, we've decided that Sandy's can have the title of the integration architect over open source software.

309
00:37:39.210 --> 00:37:49.860
Open Mainframe Project Community: Jeff's our integration architect on the performance engine and the workbench. So Sandy. You're doing a great job, thanks for all of your energy. That's great.

310
00:37:51.540 --> 00:37:57.900
Open Mainframe Project Community: Okay, so next agenda item, maybe. Now I can share since I do get that figured out

311
00:38:00.150 --> 00:38:02.370
Open Mainframe Project Community: Is to say

312
00:38:09.660 --> 00:38:09.900
This

313
00:38:14.010 --> 00:38:17.700
Open Mainframe Project Community: So here's the other items that I think we've run today.

314
00:38:18.780 --> 00:38:19.440
Open Mainframe Project Community: The

315
00:38:22.170 --> 00:38:29.880
Open Mainframe Project Community: We met with john martek last week, just a quick update on our status with the open mainframe project.

316
00:38:31.440 --> 00:38:41.280
Open Mainframe Project Community: I suggested to john that we would like to target and I'm open to feedback here. I kind of did this spur the moment. So if there's some pushback on that.

317
00:38:42.150 --> 00:39:01.350
Open Mainframe Project Community: I said, We'd like to target meeting an active project in February that we go to the the Technical Advisory Committee. That's the open mainframe committee above us, and we get approved as a active project in February. It gets a little bit aggressive for us.

318
00:39:02.730 --> 00:39:13.440
Open Mainframe Project Community: But I think it would be something that would be doable. I'd like to put that date out there for two reasons. One, that our website renewal is

319
00:39:14.640 --> 00:39:24.720
Open Mainframe Project Community: Happens in April and we'd like to probably have that transferred over to the open mainframe project before that renewal we we outlined some money there on that.

320
00:39:25.950 --> 00:39:28.290
Open Mainframe Project Community: But also the death of the mainframe.

321
00:39:29.310 --> 00:39:42.900
Open Mainframe Project Community: We're going to celebrate the 25th anniversary of the death of the mainframe. On March 15 2021 as I talked about in my video. So we should be an active project by them to be able to participate in that.

322
00:39:44.550 --> 00:39:44.940
Open Mainframe Project Community: Any

323
00:39:46.530 --> 00:39:47.490
Open Mainframe Project Community: Any feedback on that.

324
00:39:51.360 --> 00:39:52.020
Ian: Challenging

325
00:39:55.200 --> 00:39:59.070
Open Mainframe Project Community: Yeah. What do you think will challenges, what challenges.

326
00:40:01.140 --> 00:40:04.740
Ian: Getting the code out there when working in that time frames.

327
00:40:07.050 --> 00:40:07.230
Yeah.

328
00:40:11.430 --> 00:40:13.530
Open Mainframe Project Community: Well, let's see what we can do.

329
00:40:19.200 --> 00:40:20.760
GillianHannington: I think it's good to have a target.

330
00:40:24.750 --> 00:40:27.210
andrea orth: Have we defined what we mean by working

331
00:40:27.750 --> 00:40:29.280
andrea orth: What doesn't work.

332
00:40:29.670 --> 00:40:33.660
Open Mainframe Project Community: So there's a there's and that's just where I was going to Andrea. I think that's a good point.

333
00:40:35.730 --> 00:40:44.760
Open Mainframe Project Community: I'm not quite clear yet on what it means in terms of an automated build press on says on GitHub. If that's a prerequisite for us.

334
00:40:45.300 --> 00:40:56.550
Open Mainframe Project Community: To become an active project. I think the code out there is something that we would have to have right that all of our code would have to put the build process may not be fully automated on GitHub.

335
00:40:57.300 --> 00:41:11.670
Open Mainframe Project Community: And and the way to make an executable may not may not be something that we would have to have in place by that time, I don't know that we would ask the asked that question, certainly if we had it and we're before the attack. They'll approve this as an active

336
00:41:11.910 --> 00:41:16.980
Open Mainframe Project Community: Project. There may they may not approve this if we don't have an automated build process.

337
00:41:18.060 --> 00:41:21.810
12147897853: That might be a shortcut. We can take them with good mood.

338
00:41:25.230 --> 00:41:37.470
Open Mainframe Project Community: Yeah, so it could be multiple ways through that what we're looking at what we have to look for and we'd have to explain that. So I think that's one area Andrey to your point, that may be a sticking point that would be challenging for instance.

339
00:41:39.210 --> 00:41:47.190
Ian: My definition of working is you can go to our website, click on the software.

340
00:41:48.390 --> 00:41:55.980
Ian: Follow the instructions. I'm getting a working system, something that you can take a data set and run it through and

341
00:41:57.510 --> 00:41:58.860
Ian: Process it through server.

342
00:41:59.370 --> 00:41:59.640
Yeah.

343
00:42:01.230 --> 00:42:02.730
Open Mainframe Project Community: I think that that would be the

344
00:42:03.000 --> 00:42:03.600
The objective.

345
00:42:05.730 --> 00:42:06.720
12147897853: I don't think

346
00:42:07.650 --> 00:42:13.230
Open Mainframe Project Community: In to your point, and I could go there real quick, to be honest with you.

347
00:42:13.350 --> 00:42:14.610
We could go to

348
00:42:17.250 --> 00:42:18.360
Open Mainframe Project Community: The

349
00:42:20.190 --> 00:42:21.720
Open Mainframe Project Community: Go here, just real quickly.

350
00:42:23.460 --> 00:42:27.090
Open Mainframe Project Community: The requirements listed under the TLC.

351
00:42:30.540 --> 00:42:31.290
Open Mainframe Project Community: Checklist.

352
00:42:32.760 --> 00:42:42.900
Open Mainframe Project Community: Here's the criteria, right, we have to complete a proposal, plus we have to have commitments from two organizations. I think we're already there, to be honest with you.

353
00:42:43.470 --> 00:42:58.110
Open Mainframe Project Community: We have this is the key piece that we're talking about there, and there is lots gone through and done a very nice job of categorizing this and the number of these things are challenging so achieved and maintain the core infrastructure initiative, best practices batch.

354
00:43:00.030 --> 00:43:17.010
Open Mainframe Project Community: So this is the area that we're just but explicitly defined project governance committee process we're already on that we don't have a public List of adopters, but we're working on that. I think that that may come complete code licensing scan.

355
00:43:18.240 --> 00:43:22.920
Open Mainframe Project Community: This would be part of getting our code out there where we know what the process looks like.

356
00:43:23.640 --> 00:43:30.210
Open Mainframe Project Community: And and we're passing it already with the with the first test things that we've done that, probably not an issue.

357
00:43:30.900 --> 00:43:45.990
Open Mainframe Project Community: We'd have to have somebody that now represents before the tech receive a supermajority vote and and and sufficient maturity. So, you know, out of that list. Really, this is the one that that is the critical piece of that.

358
00:43:47.340 --> 00:43:51.180
Ian: There's nothing in that list of that actually producing something that works.

359
00:43:51.810 --> 00:43:59.490
Open Mainframe Project Community: No, it's a little bit of the list that Bob's given us on what the requirements here are but again.

360
00:44:00.780 --> 00:44:14.070
Open Mainframe Project Community: There's a little bit of a sense that those requirements were built more from a Linux side, not from a Z iOS side. So I think there's probably some wiggle room in the space because there just aren't that many open source projects.

361
00:44:15.090 --> 00:44:15.510
Out there.

362
00:44:17.280 --> 00:44:17.610
Ian: Sure.

363
00:44:20.100 --> 00:44:20.370
Okay.

364
00:44:21.390 --> 00:44:22.170
Sandy: How do you

365
00:44:24.960 --> 00:44:29.940
Sandy: I mean, how are we going to get someone to try the package. Once we built it.

366
00:44:35.310 --> 00:44:37.050
Sandy: Did you have to have as the US right

367
00:44:37.590 --> 00:44:48.960
Open Mainframe Project Community: Yeah, yeah. And that's part of that's part of why we're driving this Hackathon discussion sandy this to make that point and to find to open that sort of up for people to do this sort of work.

368
00:44:50.790 --> 00:44:51.090
Yeah.

369
00:44:53.790 --> 00:44:54.120
Open Mainframe Project Community: Okay.

370
00:44:55.800 --> 00:44:56.070
Open Mainframe Project Community: Okay.

371
00:44:58.470 --> 00:45:07.560
Open Mainframe Project Community: That was all that I really wanted to talk about one I just one short thing there is an automated way of building an issue and I

372
00:45:07.980 --> 00:45:16.020
Open Mainframe Project Community: I was going to get the details on this and I didn't do that if you put in an issue meeting agenda or something of that word. I need to give you the key word.

373
00:45:16.800 --> 00:45:27.270
Open Mainframe Project Community: Then automatically when we have a TASC meeting the the agenda building process will scan the issues and put that on to our meeting agenda.

374
00:45:28.020 --> 00:45:39.750
Open Mainframe Project Community: So that would be some way where you can all of you can get a meeting agenda item on the tsu meeting by opening an issue and putting out in that issue a particular format. We can talk about that.

375
00:45:42.660 --> 00:45:44.040
Open Mainframe Project Community: I'm Andrea

376
00:45:45.540 --> 00:45:48.360
Open Mainframe Project Community: Can I make you a co presenter, or you co presenter.

377
00:45:49.710 --> 00:45:52.410
Open Mainframe Project Community: So you could talk us through the

378
00:45:56.220 --> 00:45:57.240
Open Mainframe Project Community: Talk us through the

379
00:46:00.570 --> 00:46:01.170
Open Mainframe Project Community: Website.

380
00:46:02.820 --> 00:46:03.750
Open Mainframe Project Community: How do I stop sharing

381
00:46:09.030 --> 00:46:10.560
andrea orth: It up at the top, by chance,

382
00:46:20.070 --> 00:46:20.490
Open Mainframe Project Community: Coach

383
00:46:23.400 --> 00:46:23.790
Open Mainframe Project Community: Go.

384
00:46:28.590 --> 00:46:33.990
Open Mainframe Project Community: Andrea has been doing a lot of updates to our website and

385
00:46:35.610 --> 00:46:37.080
Open Mainframe Project Community: Just going to walk us through that real quick.

386
00:46:37.980 --> 00:46:40.200
andrea orth: Alright, so hopefully you are seeing

387
00:46:40.200 --> 00:46:40.440
Open Mainframe Project Community: Us.

388
00:46:40.500 --> 00:46:45.270
andrea orth: At website. Yes. So one of the first things was changing the thing

389
00:46:46.650 --> 00:46:51.540
andrea orth: I'm what I was looking for was something that display the graphics properly.

390
00:46:53.190 --> 00:47:02.160
andrea orth: One of the pages. I think it might have been about the spark project really kind of worked up the screenshots from kips power point

391
00:47:03.630 --> 00:47:07.080
andrea orth: Um, and then I was hoping for something a little more modern

392
00:47:08.400 --> 00:47:14.730
andrea orth: I kind of like this one because I like the top. I like the way the top looks, it looks to me a little more modern

393
00:47:17.670 --> 00:47:25.410
andrea orth: And of course the logo is here in the middle. And I'm not on the homepage anymore. Let me get back to the homepage.

394
00:47:26.490 --> 00:47:29.640
andrea orth: So one of the things I did when I was off last week.

395
00:47:30.750 --> 00:47:50.820
andrea orth: Was rewatch kips about 40 minute video and I noticed some themes up there and I did some editing parts of it to kind of come up with just a brief intro into this project kip is very passionate about this and that. Definitely came through.

396
00:47:52.230 --> 00:47:54.480
andrea orth: So I tried to catch a

397
00:47:55.530 --> 00:48:14.340
andrea orth: Edit together those parts of the video. And that's that intro was placed there for the open mainframe projects conference but I kept it there because I still think it applies to be a good intro for what we're doing right now under kip

398
00:48:15.480 --> 00:48:21.930
andrea orth: So as the conferences over I removed the links to the conference and our very nice project page.

399
00:48:23.280 --> 00:48:28.890
andrea orth: That was associated with the conference. I have three links here. One is

400
00:48:30.930 --> 00:48:34.140
andrea orth: goes out to a web page where there's a cut down version.

401
00:48:35.190 --> 00:48:36.810
andrea orth: Of our proof of concept.

402
00:48:38.250 --> 00:48:39.300
andrea orth: And then

403
00:48:41.790 --> 00:48:54.870
andrea orth: A link out to the page about Geneva ERS kind of the earlier five Dotto architectural direction. And of course, join us goes to the how we work page.

404
00:48:57.150 --> 00:49:01.410
andrea orth: Oh, and another thing I did last week was add some more get links.

405
00:49:03.900 --> 00:49:14.550
andrea orth: Regarding this page. This page is I didn't change anything. It's using the original five oh page, this one.

406
00:49:15.570 --> 00:49:33.930
andrea orth: Um, the spark page started out with some slides that were very minute data heavy and I figured someone brand new to Geneva that they weren't going to know what that meant. So I cut those parts of the page out leaving

407
00:49:35.010 --> 00:49:40.320
andrea orth: The parts where it starts to talk about what we're trying to do with the spark proof of concept you

408
00:49:43.020 --> 00:49:43.200
Know,

409
00:49:44.220 --> 00:49:44.670
Open Mainframe Project Community: Yeah.

410
00:49:45.570 --> 00:49:48.600
andrea orth: I think that is it.

411
00:49:48.660 --> 00:49:56.460
Open Mainframe Project Community: Actually and redo, I don't know that the team has seen our landing page on the site. I wonder, maybe if you could show that real briefly.

412
00:49:57.780 --> 00:49:58.170
andrea orth: This one.

413
00:49:58.950 --> 00:50:01.980
Open Mainframe Project Community: Yeah, yeah. Let's see what okay

414
00:50:02.100 --> 00:50:04.290
andrea orth: Yeah, Raj.

415
00:50:05.190 --> 00:50:05.940
Open Mainframe Project Community: Geneva here.

416
00:50:06.390 --> 00:50:07.170
Open Mainframe Project Community: So this is our

417
00:50:08.430 --> 00:50:11.820
Open Mainframe Project Community: This is our, our landing page on the O R amp D.

418
00:50:12.900 --> 00:50:13.560
Open Mainframe Project Community: project site.

419
00:50:16.890 --> 00:50:17.250
Excellent.

420
00:50:18.630 --> 00:50:19.410
Open Mainframe Project Community: And I

421
00:50:19.860 --> 00:50:20.550
Open Mainframe Project Community: I did note.

422
00:50:22.170 --> 00:50:29.880
Open Mainframe Project Community: On the press release. There was a news agency that picked up the press release last week. So we had our first press release that you need a year.

423
00:50:31.740 --> 00:50:32.220
From now.

424
00:50:33.600 --> 00:50:33.960
Open Mainframe Project Community: Okay.

425
00:50:35.340 --> 00:50:43.260
Ian: Yeah, that's the one that I was gonna raise an issue on the GitHub link at the bottom doesn't take you to get have to download picture does, but the GitHub doesn't

426
00:50:44.670 --> 00:50:46.080
Ian: Yeah, click on that.

427
00:50:48.360 --> 00:50:53.370
Open Mainframe Project Community: So let's uh, let's open an issue we can open an issue on the OH NP.

428
00:50:56.460 --> 00:50:57.030
Open Mainframe Project Community: About that.

429
00:50:59.910 --> 00:51:02.880
Open Mainframe Project Community: That's the best way to just communicate with them, I think.

430
00:51:03.780 --> 00:51:09.090
Sandy: That's also one of the things people can do brand new is to just verify these pages are

431
00:51:09.450 --> 00:51:11.850
Open Mainframe Project Community: Yes. Yup. Yup. Yeah.

432
00:51:13.500 --> 00:51:13.740
Yeah.

433
00:51:17.130 --> 00:51:27.030
Open Mainframe Project Community: Actually Andrea that so the chat. I think GV years chapter that probably takes you to the, I don't think we have that link on our how we work page.

434
00:51:28.800 --> 00:51:29.280
Open Mainframe Project Community: It might be

435
00:51:29.730 --> 00:51:30.390
My

436
00:51:33.840 --> 00:51:37.080
Open Mainframe Project Community: That would be good to have I had somebody today that I went to.

437
00:51:37.290 --> 00:51:38.010
andrea orth: Hell yeah, we don't

438
00:51:53.760 --> 00:51:56.730
Ian: Take it slack either the bottom one does what the top one doesn't.

439
00:52:02.700 --> 00:52:06.930
Open Mainframe Project Community: What's your comments guys on on this. Any thoughts around

440
00:52:08.490 --> 00:52:09.210
Open Mainframe Project Community: Andrea's work.

441
00:52:10.410 --> 00:52:10.890
That's good.

442
00:52:13.770 --> 00:52:13.980
I like

443
00:52:16.620 --> 00:52:25.620
GillianHannington: Yeah, I like it. It looks great. I'm not. I haven't read it all, but I will do it looks. Looks great. It's very professional.

444
00:52:26.160 --> 00:52:28.560
GillianHannington: I'll be sending a link to my parents to show off what I do.

445
00:52:29.610 --> 00:52:30.270
GillianHannington: That's for sure.

446
00:52:31.380 --> 00:52:36.390
Open Mainframe Project Community: So there is a, I don't know, Andrew, we have a YouTube page we started a

447
00:52:37.080 --> 00:52:38.070
andrea orth: Channel and go there.

448
00:52:38.310 --> 00:52:39.180
Open Mainframe Project Community: Oh, go ahead. Sorry.

449
00:52:40.230 --> 00:52:46.950
andrea orth: Yes, Kip set up. The other thing you did last week was create a UT Geneva TV.

450
00:52:47.970 --> 00:52:48.870
andrea orth: Out on YouTube.

451
00:52:50.940 --> 00:52:52.500
andrea orth: So here's the intro

452
00:52:54.660 --> 00:52:55.860
andrea orth: And then here's kips

453
00:52:55.950 --> 00:52:58.950
Open Mainframe Project Community: Are you gonna, I'm going to go put the training videos out here.

454
00:53:00.600 --> 00:53:11.400
Open Mainframe Project Community: I want you all to know that I did put a bid in for the URL geneva.tv and it was kind of close bidding because the minimum bid was $100

455
00:53:12.030 --> 00:53:25.830
Open Mainframe Project Community: And it went, you know, as we almost got it. So I did $100 even and then I was told that I couldn't you know they they came back to me and propose that it was $15,000 for the URL.

456
00:53:27.150 --> 00:53:36.720
Open Mainframe Project Community: I said, Well, I think we're going to just start negotiation, because I had at least been half I had at least $9,000 to put in a second bit. And I said, No, we're just going to

457
00:53:38.070 --> 00:53:38.730
Stop there.

458
00:53:41.760 --> 00:53:47.730
Open Mainframe Project Community: So we'll, we'll have to get 100 subscribers to our YouTube channel. And then we get our own

459
00:53:49.470 --> 00:54:04.830
Open Mainframe Project Community: URL. So when we get 100 drivers have your friends have your parents, subscribe to the Geneva URIs channel, then we can get it will get Geneva dash TV as our domain as our as our unique URL on YouTube.

460
00:54:08.970 --> 00:54:09.870
Open Mainframe Project Community: Great Andrea

461
00:54:11.970 --> 00:54:15.840
andrea orth: All right. And then as Kim mentioned earlier the domain.

462
00:54:17.310 --> 00:54:19.410
andrea orth: expires next spring.

463
00:54:21.300 --> 00:54:29.160
andrea orth: One thing I didn't think of to us last week when kip and I were talking so OPM is WordPress is that full WordPress.

464
00:54:29.550 --> 00:54:30.450
Open Mainframe Project Community: general audience.

465
00:54:30.510 --> 00:54:31.140
I don't you know

466
00:54:32.310 --> 00:54:35.220
Open Mainframe Project Community: That's how sheets. Yeah, I don't know, all of that.

467
00:54:36.570 --> 00:54:41.400
Open Mainframe Project Community: But I could, we could probably get you in contact with me on that asked that question.

468
00:54:42.630 --> 00:54:42.960
andrea orth: Okay.

469
00:54:45.420 --> 00:54:52.560
andrea orth: If it's not, I have unused and paid for hosting space, it could use to okay I'm

470
00:54:54.270 --> 00:54:58.290
Open Mainframe Project Community: Just sorry I was going to do to slightly different topic.

471
00:54:59.670 --> 00:55:12.120
Open Mainframe Project Community: When we become a active project the open mainframe project will create a legal entity and LLC here in the US to hold the project.

472
00:55:13.980 --> 00:55:25.830
Open Mainframe Project Community: It just, it doesn't give us any funding does give us a legal entity to protect our IP and it's a legal entity under which we could work. So that comes with becoming an active

473
00:55:29.580 --> 00:55:29.850
Okay.

474
00:55:31.320 --> 00:55:33.360
andrea orth: I don't have anything not

475
00:55:34.470 --> 00:55:36.990
Very good. I will stop sharing. Thanks.

476
00:55:39.270 --> 00:55:51.330
Open Mainframe Project Community: Okay. Next on the agenda, we're running a little bit behind here. I had three items or four items left. So they're going to be a little bit shorter. Maybe we don't. But this has been good discussion.

477
00:55:53.160 --> 00:56:00.210
Open Mainframe Project Community: And maybe we'll push the infrastructure update Bob to because we're going to have an infrastructure meeting after this. Maybe we will

478
00:56:00.990 --> 00:56:13.080
Open Mainframe Project Community: push that out for a moment in you want to give us a quick update on the workbench and then we'll have to do something quick on the on the zipper move along the performance engine.

479
00:56:14.760 --> 00:56:15.030
So,

480
00:56:17.610 --> 00:56:27.600
Ian: I found lots of chats with Randall, and the Jeff and Venkatesh who are working on this with me.

481
00:56:29.100 --> 00:56:48.000
Ian: And we are moving the workbench to run on top of a Postgres database that's coming along quite nicely. I can create a view and add a colon to it and activate and save the view doesn't actually do anything very much at the moment.

482
00:56:49.830 --> 00:56:51.000
Ian: But I came to

483
00:56:52.650 --> 00:57:06.030
Ian: A realization of something while stuff or a walk around our local park in that we don't need the 32 bit compiler DLL c++ thing that we've got

484
00:57:07.560 --> 00:57:20.310
Ian: All we need is to include a an antler processor for the logic text that we can create and then we can have a self contained Eclipse.

485
00:57:22.350 --> 00:57:26.880
Ian: workbench and that is what I've been looking at. I've gotten the love for

486
00:57:28.410 --> 00:57:35.610
Ian: Putting have taken our grammar files and I've converted them to answer for. So the whole thing. It can be self contained Java application.

487
00:57:37.980 --> 00:57:39.960
Ian: And I am making that work.

488
00:57:41.280 --> 00:57:46.230
Ian: Because in the workbench. You don't really need to compile anything. All you need to do is

489
00:57:46.950 --> 00:58:02.850
Ian: One verify that the text, you've typed in is correct. You can do a little bit more like make sure that the names that you refer to our genuine names. So if I refer to field kip the field actually exists.

490
00:58:04.830 --> 00:58:15.840
Ian: And then the other thing that activation does is build up a list of dependencies, the things that you referred to in your logic texts that are not

491
00:58:16.530 --> 00:58:37.320
Ian: immediately visible in the grid that to find the view like the look up. Yeah, so you need somewhere to know the fact that that view is dependent upon a bit in whatever look up, it is you refer to, and that is very easy to do with this new and love for this new antler for is

492
00:58:38.850 --> 00:58:40.890
Ian: Very sexy to a geek like me.

493
00:58:42.420 --> 00:58:44.310
Ian: It's quite a few years older. But

494
00:58:46.500 --> 00:58:48.480
Ian: It is, it is very good.

495
00:58:50.250 --> 00:58:51.870
Ian: About being a lot of fun playing with it.

496
00:58:53.670 --> 00:59:02.790
Ian: So I've converted our grammars and I'm trying to use it and I hoping that within the space of the next week or so.

497
00:59:03.840 --> 00:59:06.210
Ian: I can have a draft kind of

498
00:59:07.620 --> 00:59:12.150
Ian: Work workbench that will at least get you to extract views.

499
00:59:15.090 --> 00:59:24.240
Ian: And that will be kind of cool. Then I don't know how we get the code out into the, into into GitHub, but that's the next issue.

500
00:59:24.630 --> 00:59:30.540
Open Mainframe Project Community: Okay, so the first step there in that. No, that's not kind of Boolean that don't understand that that's really cool.

501
00:59:32.910 --> 00:59:33.240
So,

502
00:59:35.280 --> 00:59:41.370
Open Mainframe Project Community: Let me to where we want to get to. And if we can have an internally built version.

503
00:59:42.030 --> 01:00:00.480
Open Mainframe Project Community: That we can share with Andrea and Sandy via box. I think we have approval from Jim to do that so that they could at least start working on documentation. So we, we could we have approvals inside of IBM to go that route for our first use of of what you're building. Okay.

504
01:00:00.540 --> 01:00:00.870
Sure.

505
01:00:01.920 --> 01:00:11.010
Ian: I want to look at making this thing, build, not through Eclipse, but through Gretel because building into Eclipse is a

506
01:00:11.880 --> 01:00:25.560
Ian: bit awkward in that there's no nice way to manage the dependencies, whereas Gretel will nicely manage the dependencies, you can hit the type in the word Gretel build it'll go and get what it needs and build it.

507
01:00:27.600 --> 01:00:35.760
Ian: But for an eclipse application. That's not so easy because of all the strange bits and pieces that are in Eclipse. Yeah.

508
01:00:36.780 --> 01:00:56.520
Ian: The other nice thing of becoming an independent thing and getting rid of these external DLL is that our current Eclipse version is Luna, which is back from back in 2014 and it brings along the baggage of a whole bunch of CVS, the critical vulnerability things

509
01:00:58.620 --> 01:01:09.270
Ian: We should, in theory, because it's a self contained Java thing be able to upgrade it to the latest and greatest Eclipse, which I think it's just released in June.

510
01:01:10.290 --> 01:01:16.530
Ian: You should be able to upgrade that to there and get the minimum amount of externally.

511
01:01:17.880 --> 01:01:19.320
Ian: Generated CVS.

512
01:01:21.240 --> 01:01:23.400
Ian: And that would be really nice.

513
01:01:23.640 --> 01:01:25.200
Open Mainframe Project Community: That's really cool as well.

514
01:01:27.510 --> 01:01:33.840
Ian: But they. These are things we should do, getting people involved understanding this.

515
01:01:34.890 --> 01:01:40.950
Ian: You mentioned, getting people involved in before creating G unit tests that

516
01:01:42.000 --> 01:01:47.160
Ian: Exercise this thing would be an interesting way for people to get in, who are Java programmers.

517
01:01:48.720 --> 01:01:59.160
Ian: Creating J unit testers, you have to understand what this tool, what the thing is, and then you can create test and then you could realize things are wrong and add things to the project.

518
01:01:59.610 --> 01:02:00.240
Open Mainframe Project Community: So,

519
01:02:00.570 --> 01:02:02.460
Ian: That's good to get the code and their first

520
01:02:02.460 --> 01:02:09.960
Open Mainframe Project Community: Well, that we can do some research and understanding that if somebody if let me correct me in, but just where you just went

521
01:02:10.500 --> 01:02:25.380
Open Mainframe Project Community: If somebody would watch the Geneva ERS training videos, they would have a sense of what the workbench does right and then if they researched give us the name again and it was the the tool to create these test cases in

522
01:02:26.190 --> 01:02:27.150
Ian: The J unit.

523
01:02:27.540 --> 01:02:41.070
Open Mainframe Project Community: J unit if they would do some some self study on J unit and watch the training videos and start to see if they could find connections between those two. That would be an interesting place for somebody

524
01:02:41.730 --> 01:02:49.080
Ian: That will be there are already example J unit test cases. So you basically can just copy one and then

525
01:02:50.460 --> 01:02:55.080
Ian: Hackett to do other things and exercise other bits and pieces. Okay.

526
01:02:55.500 --> 01:02:58.950
Open Mainframe Project Community: Isn't be this would be a great area we could acquire new people.

527
01:02:59.820 --> 01:03:09.600
Ian: I'm trying to write the minimum amount of tests that I can create to give me some degree of confidence about

528
01:03:10.110 --> 01:03:21.660
Ian: The fact that I can write a record to the database, all the rest of the fields are just baggage to me the database record is created. Let's move on. And then I can do things. But a more

529
01:03:23.670 --> 01:03:33.030
Ian: Detailed test would be to look at various variations of things like creating PDFs with our pipes or something like that. Yeah.

530
01:03:35.160 --> 01:03:41.820
Sandy: So, so you keep saying Eclipse. Here we abandoned the VS Code.

531
01:03:43.200 --> 01:03:43.980
Sandy: Extension.

532
01:03:44.820 --> 01:03:46.320
Ian: But that's the future.

533
01:03:47.010 --> 01:03:50.010
Sandy: Okay, so, so that's where we're trying to get to.

534
01:03:51.270 --> 01:03:51.540
Yeah.

535
01:03:52.590 --> 01:03:52.980
Open Mainframe Project Community: After the

536
01:03:54.270 --> 01:03:58.710
Open Mainframe Project Community: Opening of what country converted first. Yeah, great.

537
01:03:58.770 --> 01:03:59.190
Thanks.

538
01:04:00.600 --> 01:04:09.210
Open Mainframe Project Community: Excellent. And great update and thank you for all your work. I know you've been there, Randall shared with me, you took a busman's holiday. He had to explain what that meant.

539
01:04:11.760 --> 01:04:13.890
Open Mainframe Project Community: Thank you. Thank you for taking a busman's holiday.

540
01:04:14.700 --> 01:04:15.120
Ian: Yeah.

541
01:04:15.630 --> 01:04:16.170
That's great.

542
01:04:17.730 --> 01:04:18.210
Open Mainframe Project Community: And we're going to

543
01:04:20.100 --> 01:04:26.490
Open Mainframe Project Community: Joe, can you give us an update has a separate movil that's one of our initials. We're interested in on the performance engine.

544
01:04:27.720 --> 01:04:29.160
GillianHannington: Okay, so

545
01:04:30.870 --> 01:04:34.290
GillianHannington: So currently, there is the zip code is peppered through

546
01:04:36.600 --> 01:04:46.860
GillianHannington: The main performance engine. So I spent some time implementing the code in as a set of foot callable functions in a separate source module. So

547
01:04:47.670 --> 01:04:56.700
GillianHannington: So it's all, it's all separate now and this module can either be LinkedIn or not LinkedIn is required. And obviously if it's LinkedIn. It's available and we can do the

548
01:04:57.840 --> 01:05:15.510
GillianHannington: Switching to zip and stuff, you know, as long as, excuse me, as long as the certain conditions about like what authorized and the craft palms are set, but if it's not available. It's not there. It's not LinkedIn, then it will just say up, it's not there, carry on as normal.

549
01:05:15.690 --> 01:05:34.980
GillianHannington: So, so it's so basically there's just that separation there now and it's still awaiting a bit more testing bit more rigorous testing, but it's basically done. And so, you will see that there will be bits in the code in the Geneva ERS code where you'll see it's testing to see if zips available.

550
01:05:35.070 --> 01:05:36.420
GillianHannington: Yeah, and

551
01:05:38.400 --> 01:05:45.120
GillianHannington: We could put those in macros and try and hide it a bit better, but they'll say, you know, for if we want one code base.

552
01:05:45.570 --> 01:05:46.950
GillianHannington: You're going to see traces of it.

553
01:05:47.100 --> 01:05:50.610
Open Mainframe Project Community: Yeah, I think it's fine. I don't, that's an issue doesn't bother me at all.

554
01:05:51.750 --> 01:05:58.710
GillianHannington: Okay, so basically the coatings done just waiting for more testing and and yeah so that's why we are

555
01:05:59.940 --> 01:06:02.220
Open Mainframe Project Community: You know, listen well comments.

556
01:06:02.790 --> 01:06:08.040
Sandy: Yeah. How's that work because doesn't. It doesn't. This stuff have to be in an authorized data set.

557
01:06:09.390 --> 01:06:22.380
Sandy: I mean, why don't we, I mean, maybe this is too detailed. But I just, I know we had that problem it at my old work when we, when we went to zip. I'm just wondering how we

558
01:06:23.880 --> 01:06:25.470
Sandy: Give you other options.

559
01:06:27.000 --> 01:06:40.950
GillianHannington: And well, you're right. So obviously, Virginia, get your SS IDs IPS not available, so you don't have to run authorized and that's fine. But if if you're referring SAFA and zips available, then yes.

560
01:06:42.930 --> 01:06:55.260
GillianHannington: So you would when you build it, you would you would link in this separate source more modules. So it would become part of the Mr 95 load module and then that would be authentic, put that in, or thrice library.

561
01:06:57.840 --> 01:07:02.400
Sandy: Right, so it's the building going to decide whether it's going to an authorized library or not.

562
01:07:03.030 --> 01:07:08.100
GillianHannington: Yeah, so you need link that separate source module in and it would be one lump and in your thighs library. Yeah.

563
01:07:11.910 --> 01:07:16.920
bobmcCormack: Okay, okay. In that case, Julian for building from

564
01:07:18.060 --> 01:07:21.900
bobmcCormack: GitHub, we would drop the AC ONE ON THE LINK edit.

565
01:07:24.330 --> 01:07:25.020
GillianHannington: Okay. All right.

566
01:07:26.490 --> 01:07:26.820
GillianHannington: Okay.

567
01:07:27.300 --> 01:07:27.660
Open Mainframe Project Community: Well,

568
01:07:28.020 --> 01:07:32.700
bobmcCormack: Well, so, whereas on the, on the, on the, the IBM side we're tying that yeah

569
01:07:33.060 --> 01:07:33.360
12147897853: Okay.

570
01:07:33.990 --> 01:07:39.750
12147897853: All right, you might still need that page fix this page fixing is still

571
01:07:41.520 --> 01:07:42.300
12147897853: Required

572
01:07:43.260 --> 01:07:45.090
Randall Ness: Okay, yeah, that's true.

573
01:07:45.660 --> 01:07:51.360
Randall Ness: That's a second feature that we would use that would require authorization

574
01:07:55.740 --> 01:07:57.960
Randall Ness: But it's not something that's proprietary so

575
01:07:57.990 --> 01:07:58.350
Randall Ness: We can

576
01:07:58.380 --> 01:08:00.810
Randall Ness: Share that in Philly with Geneva your ass.

577
01:08:07.590 --> 01:08:19.080
Open Mainframe Project Community: Okay, next time, our next meeting. And we're, we're at the top of our hour here, Jeff and Neil, I think I'm going to have to you discussion to the next time we

578
01:08:20.970 --> 01:08:23.550
Open Mainframe Project Community: Were going to, we will put you at the top of the next

579
01:08:23.550 --> 01:08:26.610
Open Mainframe Project Community: Discussion. We're going to reverse the order. Okay, next time.

580
01:08:26.820 --> 01:08:27.180
Open Mainframe Project Community: I didn't

581
01:08:27.210 --> 01:08:28.020
12147897853: Wake up, Thomas

582
01:08:30.690 --> 01:08:35.370
Open Mainframe Project Community: I want to, well, if somebody has to drop it. Want to just ask a question we had set this to be up

583
01:08:35.550 --> 01:08:47.940
Open Mainframe Project Community: Every other week because of change in our schedule that we have a TASC meeting the first and third Tuesdays of the month.

584
01:08:49.050 --> 01:08:52.590
Open Mainframe Project Community: Instead of going every other week. Is there any

585
01:08:54.780 --> 01:09:09.900
Open Mainframe Project Community: No part of me. I want to go the second and fourth Tuesday of the month. Would there be any problems with us changing RTS is scheduled to be twice a month, rather than every other week, which I think be okay with that.

586
01:09:14.280 --> 01:09:23.250
Open Mainframe Project Community: Okay, we'll call it sold. There's no objections to do me twice a month we'll do the second and fourth Tuesday of the month for our discussions.

587
01:09:27.120 --> 01:09:35.760
Open Mainframe Project Community: Okay. And, you know, we're going to steal from the infrastructure meeting for a minute. We give you just you and Jeff. Go ahead, give us a quick update on spark and OSS integration.

588
01:09:38.100 --> 01:09:41.340
12147897853: Okay, Jeff, do you want me to go

589
01:09:45.660 --> 01:09:46.920
Open Mainframe Project Community: Like you're on. I guess he do

590
01:09:52.020 --> 01:10:01.560
12147897853: So Java assembler integration. So why, why would you do that we wanted to leverage the performance oriented.

591
01:10:02.580 --> 01:10:03.840
12147897853: Components of staffer

592
01:10:04.890 --> 01:10:06.990
12147897853: So that we can make use of those from

593
01:10:08.400 --> 01:10:12.990
12147897853: The Java CEOs world open source.

594
01:10:14.310 --> 01:10:15.510
12147897853: Environment on the

595
01:10:17.250 --> 01:10:23.400
12147897853: That would unlock a lot of power, make that available available to people to use

596
01:10:24.660 --> 01:10:26.640
12147897853: And the spark and scholar.

597
01:10:28.410 --> 01:10:34.110
12147897853: And there's also the thought of the aggregation phases that we could possibly

598
01:10:37.470 --> 01:10:45.450
12147897853: Leverage spark and scholar for the aggregations place, not the not the extract phase, but the aggregation phase.

599
01:10:47.580 --> 01:10:50.340
12147897853: How would this work, how would be

600
01:10:51.750 --> 01:10:53.970
12147897853: Also side Java. Jay, and I

601
01:10:55.500 --> 01:10:55.860
12147897853: That

602
01:10:57.990 --> 01:11:06.570
12147897853: Out of the box generates a c++ rapper. So there would be a C or C or c++ component

603
01:11:08.610 --> 01:11:20.220
12147897853: But we may skip that, because it's just a header file and also in the mix is ASCII absolute it conversion comes out with Java as ASCII

604
01:11:21.300 --> 01:11:30.330
12147897853: And needs to be in the world is executed or MDS world and always is.

605
01:11:32.190 --> 01:11:39.930
12147897853: Created from an article by a guy called David Stevens who happens to have in Perth.

606
01:11:40.470 --> 01:11:41.250
Ian: Oh, I know.

607
01:11:45.270 --> 01:11:45.690
GillianHannington: Yeah.

608
01:11:45.810 --> 01:11:47.070
12147897853: Cool by David Stephen

609
01:11:47.970 --> 01:11:49.500
Open Mainframe Project Community: Stephen to join our project.

610
01:11:53.850 --> 01:11:55.050
12147897853: Is that they got they got long

611
01:11:55.050 --> 01:11:55.980
GillianHannington: Pillar is that is

612
01:11:56.400 --> 01:11:59.040
12147897853: This yeah yeah yeah I know

613
01:11:59.070 --> 01:12:00.090
GillianHannington: We've had beers with them.

614
01:12:01.980 --> 01:12:03.840
12147897853: Paulsen Football Club supporter

615
01:12:05.700 --> 01:12:06.750
Ian: Forgive them for that.

616
01:12:12.780 --> 01:12:13.530
12147897853: That's really good.

617
01:12:15.570 --> 01:12:18.030
12147897853: So that's, that's probably all like dare say it.

618
01:12:19.350 --> 01:12:22.650
12147897853: So there's a lot of potential here. Yes, there is.

619
01:12:24.090 --> 01:12:25.920
Ian: There's a Java library. I use

620
01:12:26.160 --> 01:12:31.680
Ian: That does the ASCII absolute conversion stuff as well like give you details on that.

621
01:12:33.240 --> 01:12:33.600
Right.

622
01:12:34.710 --> 01:12:39.480
12147897853: That is a Jay and I stuff that is I don't know Java. I've been

623
01:12:41.580 --> 01:12:44.490
12147897853: Not getting very far with that. Yeah, we, we do some

624
01:12:44.730 --> 01:12:48.540
Ian: Nice stuff within the workbench some sample libraries there as well.

625
01:12:49.980 --> 01:12:53.610
12147897853: And then getting it all to work on z. That's your problem.

626
01:12:54.960 --> 01:12:57.060
12147897853: Yeah, yeah, that's fine. I'm

627
01:12:58.830 --> 01:13:00.450
bobmcCormack: Just calling punches pilot

628
01:13:04.140 --> 01:13:04.590
Okay.

629
01:13:06.000 --> 01:13:11.250
Open Mainframe Project Community: Neil that was well worth the time. Thank you for everybody for going over for just a minute more

630
01:13:12.450 --> 01:13:14.910
Open Mainframe Project Community: We are generating some energy

631
01:13:16.020 --> 01:13:23.970
Open Mainframe Project Community: People are joining Neil and my we've been meeting on Fridays. We've got people that are joining Neil and I every week to talk about

632
01:13:24.960 --> 01:13:35.040
Open Mainframe Project Community: These R amp D efforts and Randalls helping to add this up and Jeff to to spread this and get more people involved from an IBM perspective on just experimenting with z.

633
01:13:36.000 --> 01:13:44.010
Open Mainframe Project Community: So it's great. I love the energy, we've got going on here and you all have your, your commitment and dedication to this work, the script.

634
01:13:46.740 --> 01:13:47.430
Open Mainframe Project Community: Any

635
01:13:48.600 --> 01:13:53.160
Open Mainframe Project Community: Anything else that we need to cover here before we start into the infrastructure reading

636
01:13:54.000 --> 01:13:55.350
andrea orth: My full request, please.

637
01:13:55.470 --> 01:13:57.270
Open Mainframe Project Community: For them, I can meet you

638
01:13:58.800 --> 01:14:00.390
Open Mainframe Project Community: On the community, Andrew.

639
01:14:00.780 --> 01:14:04.800
andrea orth: Yeah, okay. Oh, I built a template for meeting minutes

640
01:14:05.340 --> 01:14:12.600
Open Mainframe Project Community: And we need to we need to check off Andrea on the checklist of the marketing steps have done so we could

641
01:14:14.130 --> 01:14:23.280
Open Mainframe Project Community: Check that off to and actually while I got to start the infrastructure meeting just one point that I did bring up

642
01:14:26.790 --> 01:14:32.070
Open Mainframe Project Community: Bob, I brought up with the one thing we're still outstanding. I think I have Jared here.

643
01:14:34.020 --> 01:14:34.380
12147897853: Is

644
01:14:38.610 --> 01:14:47.580
Open Mainframe Project Community: Is in the we still need to make a release not markdown document in the community database.

645
01:14:49.770 --> 01:14:52.860
Open Mainframe Project Community: So it seems we get that we can check that off.

646
01:14:54.540 --> 01:15:03.330
Open Mainframe Project Community: And I think we need to talk about what this means. I'm not quite sure what we're and we're working on this problem. So that's probably checked off.

647
01:15:05.760 --> 01:15:09.960
Open Mainframe Project Community: There as well. But these two down here are clearly done so great work.

648
01:15:11.730 --> 01:15:15.510
Open Mainframe Project Community: I do I'm turning the infrastructure meeting over to

649
01:15:17.010 --> 01:15:20.670
Open Mainframe Project Community: We'll just stay on. But I didn't build an agenda for this meeting.

650
01:15:25.650 --> 01:15:27.570
Open Mainframe Project Community: Randall. Does this go to you, Bob.

651
01:15:33.060 --> 01:15:33.480
Open Mainframe Project Community: Bob

652
01:15:35.010 --> 01:15:37.350
bobmcCormack: Might as well. Yes, my time, I'll take notes.

653
01:15:39.750 --> 01:15:50.190
bobmcCormack: The thing is, there's a couple of topics. One is, I'm getting looking at the releases and whether we do across the board for the various component parts.

654
01:15:50.700 --> 01:16:02.190
bobmcCormack: Or do we have separate and I suspect the latter. The second topic would be the the automated build process and how we plan on doing it, or what's the best approach and what our current

655
01:16:03.570 --> 01:16:08.280
bobmcCormack: Tools are so they're the two major aspects. So we'll start with release, I think.

656
01:16:10.590 --> 01:16:11.220
bobmcCormack: Currently,

657
01:16:12.450 --> 01:16:22.740
bobmcCormack: In a base say for GV be liberals and example was sitting at version release and these do not match to the VR rooms that we are used to an IBM

658
01:16:23.310 --> 01:16:43.260
bobmcCormack: But the more major, minor and patch. So I was sitting at 000 so I'm changing in GV the live I'm setting up the GB bi macro to have 000 in it. So that gets built into the eye catcher into any modules from that utility Reaper.

659
01:16:45.060 --> 01:17:07.830
bobmcCormack: When we happy that it's all stable will do a branch and we'll go to 100 now Randall, from your perspective, are you happy if we do that, and in addition that 100 becomes is not tied to the workbench or the performance engine.

660
01:17:10.020 --> 01:17:10.290
Hmm.

661
01:17:11.490 --> 01:17:13.530
Randall Ness: I haven't really given enough thought. I mean,

662
01:17:13.800 --> 01:17:24.840
Randall Ness: Yeah, I guess I had a chat with Ian earlier this week about version numbers. And I guess I originally, I thought, well, we could just keep the numbers just consistent between Geneva.

663
01:17:25.260 --> 01:17:33.330
Randall Ness: And safir on the IBM side and then everything would just kind of flow through. And I thought that if we started deviating from that that could be really problematic.

664
01:17:33.750 --> 01:17:53.880
Randall Ness: On the other hand, even pointed out that, well, these, these two products may grow at different rates. We may add features on the South Side But Not the Geneva here as side and vice versa. And so it may be difficult to keep the numbering consistent. Anyway, so I guess I would not oppose having

665
01:17:55.500 --> 01:17:57.870
Randall Ness: A different numbering scheme for the Geneva side.

666
01:17:58.920 --> 01:18:03.090
bobmcCormack: Right. And it doesn't necessarily have to start at 100

667
01:18:04.620 --> 01:18:10.890
bobmcCormack: If you wanted to go to 450 dot zero would that last zero being a patch level.

668
01:18:12.690 --> 01:18:21.390
bobmcCormack: For the workbench and for the performance engine, we could go for four dot 919 dot zero

669
01:18:24.330 --> 01:18:32.760
Randall Ness: I guess what I'm concerned about is this is directly tying the workbench and the performance engine together because they may grow at different rates. We may have

670
01:18:34.170 --> 01:18:39.360
Randall Ness: You know, the front end being something totally different from the back end and

671
01:18:40.980 --> 01:18:43.800
Randall Ness: Maybe several different back ends could work with the same front end.

672
01:18:45.120 --> 01:18:45.360
Yeah.

673
01:18:46.500 --> 01:18:46.860
Randall Ness: So it's

674
01:18:46.950 --> 01:18:47.580
Ian: Just going to

675
01:18:48.900 --> 01:18:50.850
Ian: Go, you're going to need to manage the

676
01:18:52.680 --> 01:19:00.750
Ian: Document. The compatibility between different things, if indeed they become incompatible if if we went to

677
01:19:02.010 --> 01:19:08.250
Ian: A compiler with new features, etc. And that created some language or workbench.

678
01:19:09.570 --> 01:19:20.910
Ian: Level that no longer works correctly with an older version, then you need to manage that. Or we could try and make the stipulation that everything should be backward compatible.

679
01:19:24.690 --> 01:19:24.990
Randall Ness: Yeah.

680
01:19:26.250 --> 01:19:31.230
bobmcCormack: Well as we upgrade and grow it will be having different branches. So a

681
01:19:32.580 --> 01:19:36.810
bobmcCormack: update to the release markdown folder and each of the

682
01:19:36.990 --> 01:19:45.990
bobmcCormack: reproach would be required to indicate if there is any in compatibility or maintain a matrix of compatibility. So

683
01:19:46.200 --> 01:19:49.470
Ian: I think the easiest thing to impose to make sure that

684
01:19:51.150 --> 01:19:54.330
Ian: It all works in all the different levels.

685
01:19:55.380 --> 01:19:56.820
Ian: So you're aiming for.

686
01:19:57.120 --> 01:20:00.240
Ian: That's kind of the mainframe philosophy. You can you can

687
01:20:01.710 --> 01:20:05.970
Ian: You can run code from donkey's years ago still on the current versions. Yeah.

688
01:20:09.930 --> 01:20:18.690
bobmcCormack: Okay. And as far as the practicalities of it for the performance engine. We've got the GV bi macro

689
01:20:20.280 --> 01:20:31.230
bobmcCormack: But as for the workbench. Do you have something to put an eye out update an eye catcher in there to indicate what that when you get to build what it's built out

690
01:20:34.590 --> 01:20:41.040
Ian: There is something somewhere. Exactly. I'm not entirely convinced I know how it works at the Minutes.

691
01:20:42.210 --> 01:20:46.410
Ian: But I know there are version numbers, it may actually just be a number in the file.

692
01:20:47.130 --> 01:20:47.400
Yeah.

693
01:20:48.930 --> 01:21:05.310
bobmcCormack: Because what we're doing with these three numbers, Major, Minor and patch levels. We're following the semantic version process as required by the CIA badge process. So that's

694
01:21:05.940 --> 01:21:07.890
Ian: The usual what's what's

695
01:21:08.070 --> 01:21:10.320
bobmcCormack: Governing these changes.

696
01:21:11.670 --> 01:21:26.430
bobmcCormack: Okay, any other questions on our current process as far as the well, sorry. One thing is, we'll have to make sure that the release markdowns are existing in each of the root pros and updated accordingly. So leave that with me.

697
01:21:28.200 --> 01:21:30.450
bobmcCormack: So any other questions on the release process.

698
01:21:32.850 --> 01:21:36.990
bobmcCormack: Okay, the next one is our design philosophy for

699
01:21:38.220 --> 01:21:51.060
bobmcCormack: Automated builds a both from test case and from development and at the moment. What's focusing on development and so say from a Jillian's perspective as a developer

700
01:21:52.380 --> 01:21:58.830
bobmcCormack: My current philosophy would be that if she has dreidel on her laptop. She has

701
01:22:01.140 --> 01:22:09.900
bobmcCormack: And that comes with Groovy built in and she has Zoe command line code deployed on her laptop. She can

702
01:22:11.130 --> 01:22:36.630
bobmcCormack: Currently, and this is working. Run a grateful cast to pull the door get clone of a breed pro down onto her desktop sorry laptop. Then she can then run another great or task and that will copy all the repo files into a source PDs on sauce. In this case, complex

703
01:22:37.650 --> 01:22:48.450
bobmcCormack: Thing, right, or can run another task to run build jobs. And that's where we currently working on this getting that to work properly at the moment but submitting of jobs.

704
01:22:48.900 --> 01:23:07.770
bobmcCormack: And getting the return kids back is working. So that's sort of a layer of cradle and bash and scripting combined. So this is all command line from a command line operation from a DOS prompt. So that's the current ethos.

705
01:23:08.910 --> 01:23:21.960
bobmcCormack: Now that may change as we move further into knowing about zone because it does exist as plugins integrated and it may offer more capabilities. There are

706
01:23:22.890 --> 01:23:40.620
bobmcCormack: Saying the case of those that know that Polly Stephanie. They have a process where they rely on some of I'm not 100% sure, but it seems that they rely on db, db API's and that's an IBM proprietary product Liam dodi works on

707
01:23:42.330 --> 01:23:53.850
bobmcCormack: Where they can run jobs directly out of USS but we're not using us as we're staying well away we're staying on a Windows platform and communicating in that direction.

708
01:23:54.930 --> 01:23:58.260
bobmcCormack: So that's the current plan of attack. Do I have any comments.

709
01:23:59.490 --> 01:24:02.520
Ian: There's another extension, you can have to that because

710
01:24:04.140 --> 01:24:13.350
Ian: Visual Studio Code integrates really nicely with both with get with Gretel and with Zoe.

711
01:24:15.510 --> 01:24:25.770
Ian: You can run the the your Gretel tasks from within. Visual Studio Code, which means you can actually edit all the files and see all the bits and pieces there.

712
01:24:27.510 --> 01:24:34.140
Ian: You can also nicely see all the good stuff. If you wanted to do manual get things

713
01:24:35.430 --> 01:24:36.840
Ian: And you can also run

714
01:24:37.890 --> 01:24:41.280
Ian: Are we in see the jobs and and what have you.

715
01:24:42.480 --> 01:24:45.750
Ian: Through the design the plugin that is in Visual Studio.

716
01:24:46.830 --> 01:24:48.960
Ian: So you can kind of eat as a

717
01:24:51.570 --> 01:24:55.680
Ian: Developer provide a framework, a developer environment.

718
01:24:56.790 --> 01:25:06.330
Ian: So ideally, you can just run the script you just right click on the griddle script and I'll do everything for you, but it also allows you to see what's going on.

719
01:25:08.340 --> 01:25:09.510
bobmcCormack: No, that sounds. I'm

720
01:25:10.500 --> 01:25:11.970
bobmcCormack: All about

721
01:25:15.060 --> 01:25:17.910
bobmcCormack: Because all the stuff that I've been doing command line can run in

722
01:25:19.500 --> 01:25:24.480
Ian: In the UK in London. Yeah, you can run the command line within Visual Studio as well.

723
01:25:26.220 --> 01:25:33.180
Ian: I'll maybe show you some of the stuff offline a bit later. Yeah.

724
01:25:33.540 --> 01:25:43.140
bobmcCormack: I'll make a note to one will have a webby on it, you know, to bring me up to speed, because the moment my Zoe on the S is hosed.

725
01:25:47.100 --> 01:25:47.640
bobmcCormack: Right.

726
01:25:48.810 --> 01:26:02.280
bobmcCormack: So they're the two aspects that I want to cover do it other any more comments in terms of our current approach. So we're thinking Visual Studio with the cradle and Zoe bits and pieces.

727
01:26:02.880 --> 01:26:12.450
Randall Ness: Well, one thing I was wondering, Bob is that it seems like we have a working build system right now. The only problem is the current build system talks to RTC instead of

728
01:26:12.990 --> 01:26:22.740
Randall Ness: Get and also it's using build forge rather than grateful or some other alternative tool. Is there anything that we have in built for it right now that we could

729
01:26:23.550 --> 01:26:34.200
Randall Ness: That be that I don't know. It's something that could be communicated to other people to say, by the way, here's how we're doing it now and build for it. We want to do basically the same thing, but over in

730
01:26:35.400 --> 01:26:39.540
Randall Ness: The in the world of something that's open source. Is that possible.

731
01:26:41.760 --> 01:27:04.170
bobmcCormack: The Bill Ford processes fairly well to proprietary we can provide them with scripts. The project scripts. But again, it relies on the underlying conductivity of bill forward to the mind frame will forge agents, both on the dispatch system and on the receiving system all the variables.

732
01:27:06.420 --> 01:27:08.490
bobmcCormack: So it's kind of tricky.

733
01:27:09.900 --> 01:27:12.060
bobmcCormack: And of course bill for yourself is

734
01:27:13.590 --> 01:27:15.360
bobmcCormack: Approaching obsolescence.

735
01:27:16.440 --> 01:27:26.310
bobmcCormack: So, and also the other problem Randall is to meet the CIO badge requirements we have to show that we are building the product.

736
01:27:27.420 --> 01:27:35.430
bobmcCormack: Using floss technology, ie tools like Groovy and Zoe and the S, but not

737
01:27:36.660 --> 01:27:39.000
bobmcCormack: And Bill forge wouldn't meet that requirement.

738
01:27:39.540 --> 01:27:51.870
Randall Ness: Right was making the assumption that we weren't going to use build for it. But I was wondering if there's something that billed for it. You could publish saying here's the design. Here's all the steps. Now we just need to recreate this in a different tool.

739
01:27:57.630 --> 01:28:04.950
bobmcCormack: Well, the half a project, per se. In the case of PM for builds half the project steps are basically working out.

740
01:28:06.120 --> 01:28:13.350
bobmcCormack: What environments, the databases. The for 18 dot, dot, dot, which be level.

741
01:28:15.330 --> 01:28:19.200
bobmcCormack: And getting all the stuff down and transfer from PDs as and what have you.

742
01:28:21.510 --> 01:28:21.960
bobmcCormack: The

743
01:28:24.180 --> 01:28:40.080
bobmcCormack: The, the thing would was if we put in the in the readme on the repriced saying that this is how the build process, we would recommend we could copy some of the to forge notes or the project in terms of water.

744
01:28:42.930 --> 01:28:47.940
bobmcCormack: We wouldn't, we wouldn't be too descriptive, we could provide say in the case of

745
01:28:49.530 --> 01:29:01.230
bobmcCormack: We say, well, to build it. Here's some Bash scripts and some great scripts. You could use and and maybe the US bill Ford's to provide a high level.

746
01:29:03.240 --> 01:29:03.930
bobmcCormack: Diagram.

747
01:29:05.250 --> 01:29:07.260
bobmcCormack: Or pseudo code, if you will.

748
01:29:08.370 --> 01:29:11.130
Randall Ness: Right, right, that that's kind of where I was headed because it seems

749
01:29:11.130 --> 01:29:11.610
Randall Ness: Like yeah

750
01:29:11.880 --> 01:29:20.910
Randall Ness: Well certainly we couldn't reuse the build forge scripts as they are, but just saying this is our basic design because we put a lot of thought into this. I mean, over the years, we've had to tweak this

751
01:29:21.300 --> 01:29:27.810
Randall Ness: Many times to get it to work. Right. And it's, it's pretty complicated, right now, I'd hate to like throw that design away.

752
01:29:29.880 --> 01:29:44.640
bobmcCormack: No it's, it's a reference point for us to make sure that we don't skip anything. Yeah. Yeah. Especially when you start if initially because we'll still be doing the workbench and c++ and stuff like that. Yeah, yeah.

753
01:29:45.990 --> 01:29:47.460
bobmcCormack: Okay, good. It's only I think

754
01:29:48.180 --> 01:29:48.660
I think

755
01:29:50.100 --> 01:29:52.290
Ian: Bill Ford should go the way of the dodo.

756
01:29:53.970 --> 01:29:54.630
Ian: And

757
01:29:55.650 --> 01:30:02.010
Ian: You should just migrate across to the things like a cradle system to build things and Visual Studio.

758
01:30:03.810 --> 01:30:14.340
Ian: And the other advantage we get if you do something like that is currently with a within our proprietary built on system. We are limited to one person building at a time.

759
01:30:16.770 --> 01:30:19.140
Ian: If we went to something like Gretel

760
01:30:21.210 --> 01:30:22.050
Ian: We could

761
01:30:23.490 --> 01:30:24.900
Ian: Do build some parallel

762
01:30:30.420 --> 01:30:31.260
Randall Ness: That's a good thing.

763
01:30:33.540 --> 01:30:35.670
Eugene Morrow: certainly wouldn't be here.

764
01:30:36.690 --> 01:30:36.990
Eugene Morrow: Yeah.

765
01:30:39.540 --> 01:30:40.950
Ian: And also be but simpler.

766
01:30:42.690 --> 01:30:54.570
Ian: Wealth, we've done many years of messing about with Bill forge that seems to be we've learned. We've pilot many layers of compost on top of each other.

767
01:30:56.670 --> 01:31:00.120
Randall Ness: So you're thinking we should basically throw that design aware, just kind of started fresh

768
01:31:00.870 --> 01:31:02.520
Ian: Yeah, tonight, its existence.

769
01:31:05.730 --> 01:31:07.470
bobmcCormack: shaman. A CALL IT WILL CALL YOU PAY THAT

770
01:31:10.230 --> 01:31:14.490
Eugene Morrow: In surely it's simply it reminds us what needs to be done. It's sort of like

771
01:31:14.520 --> 01:31:14.850
Yeah.

772
01:31:15.870 --> 01:31:32.670
Ian: It is, it's, I mean the steps the steps that are there when you when you run the project, the steps that come out or all the steps that you need to do. But essentially, barely obvious. Check it out, build it and test it. Yes.

773
01:31:40.080 --> 01:31:45.240
Eugene Morrow: And we had some idiosyncratic things like copy to Boulder and stuff like this which we might need tomorrow that

774
01:31:46.350 --> 01:32:06.870
bobmcCormack: We have, it's a full service build process you're doing, as you well know things like setting aliases and copies and and locking up the data sets your summer production point of view. Yeah. Whereas here, we're dealing with a lightweight build process, independent of individuals so

775
01:32:08.430 --> 01:32:08.700
bobmcCormack: Yeah.

776
01:32:09.630 --> 01:32:10.980
Eugene Morrow: So that's the easier. Yes.

777
01:32:12.420 --> 01:32:13.500
bobmcCormack: Immensely. So, yeah.

778
01:32:15.210 --> 01:32:18.300
bobmcCormack: Yep. And we haven't really young.

779
01:32:20.130 --> 01:32:33.270
bobmcCormack: I think examined all the opportunities, given that we might use cradle and Bs, but the zone plugins are always changing and improving so and we're only using command line at the moment, but we could potentially move to

780
01:32:34.410 --> 01:32:45.300
bobmcCormack: Zoe plugins, which makes our job submission handling a lot easier. Whereas we don't have to rely on JCR templates. We could do it dynamically. So there's another

781
01:32:46.380 --> 01:32:48.090
bobmcCormack: Step in in the future.

782
01:32:52.020 --> 01:32:52.410
bobmcCormack: Okay.

783
01:32:54.900 --> 01:32:56.100
Eugene Morrow: Sounds good to me. I can't wait.

784
01:32:57.120 --> 01:32:57.480
Okay.

785
01:32:59.160 --> 01:33:16.320
bobmcCormack: Further on the infrastructure, the GV be live. We did a scan john medic scan for us a couple of parts and then now been updated we've cleaned up the IBM surface dash GV be live Ribeiro, so that's almost empty now and

786
01:33:18.390 --> 01:33:24.540
bobmcCormack: So that work well. And thank you for the suggestion, the issue process work well so that

787
01:33:25.770 --> 01:33:26.640
bobmcCormack: It's done and dusted

788
01:33:27.720 --> 01:33:32.460
bobmcCormack: Furthermore, Kip, I think I raised an issue for you, concerning the scholar.

789
01:33:33.840 --> 01:33:38.610
bobmcCormack: PLC about some missing bits. Have you seen that one yet.

790
01:33:38.940 --> 01:33:43.170
Open Mainframe Project Community: No, I don't think I had. Did you open you open an issue. And yeah. Yep.

791
01:33:44.370 --> 01:33:47.460
Open Mainframe Project Community: And you might have shown that, to me, let me let me go back there real quick.

792
01:33:52.050 --> 01:33:52.710
Open Mainframe Project Community: And I'm not

793
01:33:54.630 --> 01:33:55.200
Open Mainframe Project Community: Yeah.

794
01:33:57.390 --> 01:33:57.780
Open Mainframe Project Community: Go ahead.

795
01:33:59.070 --> 01:33:59.760
Open Mainframe Project Community: Do that real quick.

796
01:34:01.020 --> 01:34:05.040
bobmcCormack: Okay, so that's basically it for me.

797
01:34:06.390 --> 01:34:08.730
bobmcCormack: And from your perspective infrastructure.

798
01:34:12.090 --> 01:34:16.710
Ian: Um, yeah, that sounds good. And we need to add in the

799
01:34:18.570 --> 01:34:22.920
Ian: The workbench building part as well. And that will be

800
01:34:24.300 --> 01:34:25.860
Ian: Somewhat more painful but

801
01:34:26.940 --> 01:34:28.710
Ian: It's really just creating

802
01:34:30.270 --> 01:34:35.370
Ian: What I'm aiming for us to create the greatest things to do it. And the greatest project to do that.

803
01:34:36.630 --> 01:34:38.130
Ian: So it follows the same pattern.

804
01:34:39.420 --> 01:34:41.760
Ian: Check and I do the building and

805
01:34:44.310 --> 01:34:51.780
Ian: grovel. One of the nice things that Gretel does is it before. Java is it, it can go off to

806
01:34:52.920 --> 01:34:57.930
Ian: Third party repositories and drag down all the third party libraries that you need.

807
01:35:00.030 --> 01:35:02.280
Ian: And make them part of you build

808
01:35:03.840 --> 01:35:05.010
Ian: griddle has an

809
01:35:05.790 --> 01:35:10.950
Ian: Easy read if you read the documentation for griddled as a nice thing of the call it

810
01:35:13.410 --> 01:35:17.220
Ian: Convention over configuration. So instead of having

811
01:35:19.650 --> 01:35:29.760
Ian: 1000 settings all over the place. This still do exist and Gretel. You can do things manually with a lot of settings. But if you just put things in the right spot.

812
01:35:30.960 --> 01:35:32.400
Ian: Gretel will do things for you.

813
01:35:33.450 --> 01:35:47.070
Ian: And you don't have to think that's a really nice aspect of it. So if I bought my Java in a directory called Src slice men slash Java, it'll just get compiled automatically. I don't have to tell it anything

814
01:35:50.040 --> 01:35:55.170
Ian: And so under the whole tree that lives in that directory will be built.

815
01:35:57.690 --> 01:35:59.220
Ian: And it's really cool.

816
01:36:05.070 --> 01:36:06.960
bobmcCormack: Eugene, from your perspective,

817
01:36:08.010 --> 01:36:08.850
bobmcCormack: Infrastructure

818
01:36:10.560 --> 01:36:22.890
Eugene Morrow: The only issue I have is one of the ones I'm going to grapple with at the moment. And that is building the workbench. You've got to include the online help. Now that was done in by that the old

819
01:36:23.970 --> 01:36:29.700
Eugene Morrow: Information development workbench. They had a batch file of some sort that did it.

820
01:36:30.720 --> 01:36:37.380
Eugene Morrow: I've got to somehow make that work. And the RTC and of course the greater world, but I'll talk to you about that when the time comes.

821
01:36:38.280 --> 01:36:42.870
Eugene Morrow: I think it's just creating a jar file, we're going to create some sort of jar file and I'll talk to you about that.

822
01:36:43.440 --> 01:36:56.250
Eugene Morrow: But hopefully I can get the output out DCS and will create a jar file and that will give you the online help inside the workbench. That's the only I'll have to talk to you in about that. I think it'll work with these tools. I was going to work out the nuts and bolts.

823
01:36:57.480 --> 01:37:03.690
Ian: Yeah, we just got a copy of the the the jar file into some whether it can be accessible.

824
01:37:04.320 --> 01:37:05.010
Eugene Morrow: Yeah, Brian.

825
01:37:06.870 --> 01:37:07.110
But

826
01:37:08.310 --> 01:37:17.340
bobmcCormack: From a good point of view, what do we deploy to get to be deployed the jar. Do we deploy the, the source of the documentation.

827
01:37:18.240 --> 01:37:30.780
Eugene Morrow: Um, I think what we'll put in get is the source of the documentation and then I'll I've got all these scripts that run a DTS process to generate your output.

828
01:37:32.640 --> 01:37:39.690
Eugene Morrow: I assume. Yeah. I thought that was a principle. We're giving the customers and giving the whole world, the raw data files and they can then

829
01:37:40.380 --> 01:37:50.250
Eugene Morrow: generate their own HTML and PDF files and things like that. And with the right instructions. Show them how to create the jar file you stick in the workbench. So the online help

830
01:37:50.790 --> 01:38:05.340
Eugene Morrow: Appears in the workbench. So yes, we will be giving the customers the data files, and I assume we got to start from data files and then generate nice HTML PDF files, things like that. And then that goes into a jar, which goes into workbench so

831
01:38:06.990 --> 01:38:09.150
Eugene Morrow: Gets would store data. I understand.

832
01:38:09.720 --> 01:38:11.520
bobmcCormack: That's my thing, right, if it's not nice.

833
01:38:13.140 --> 01:38:24.690
bobmcCormack: But we would then have a build process that would pull it from that get repo and procession create the job and make the job available for the workbench build

834
01:38:25.380 --> 01:38:36.690
Eugene Morrow: Yes. Well, I'm busy doing an automation of how the internal IBM System does it, but I believe it might be fairly compatible because we're using a tool.

835
01:38:40.230 --> 01:38:44.880
Eugene Morrow: I think it's called DCS tools which is a

836
01:38:46.920 --> 01:38:52.620
Eugene Morrow: Which is also i thought an open source thing and DCS tools, other people can use it as well and

837
01:38:53.670 --> 01:38:59.220
Eugene Morrow: That will the automation. I'm using other people could use. I think that's the way in the work.

838
01:39:01.200 --> 01:39:08.910
Eugene Morrow: I'll find out more about as it goes along, once I've got more automation finished. We'll find out. Can it be used by customers, perhaps not will see

839
01:39:09.870 --> 01:39:13.290
Ian: That there are some other open source tools as well.

840
01:39:13.860 --> 01:39:26.040
Eugene Morrow: Yeah, and it may be customers have their own way of going from decide to HTML5, for example, but in theory, if you've got the same source. It doesn't matter which tool to use you'll get the same HTML file and you'll get the same help so

841
01:39:27.030 --> 01:39:38.130
Eugene Morrow: It may be that my process of generating the the sort of help output is simply one way of doing it. And the customers might have their own way of doing it. As long as we all have the same data, we should be fine.

842
01:39:41.100 --> 01:39:41.550
bobmcCormack: For

843
01:39:42.240 --> 01:39:45.600
bobmcCormack: Rain. Excellent. Okay. Sorry. Anything else you

844
01:39:46.350 --> 01:39:47.040
Eugene Morrow: Know Nothing.

845
01:39:48.270 --> 01:39:54.450
bobmcCormack: Random from your perspective in terms of nuts and bolts. We mucking around with. Do you have any input.

846
01:39:55.620 --> 01:39:58.110
Randall Ness: I'm done more than I already

847
01:40:01.650 --> 01:40:05.190
Open Mainframe Project Community: Bob. Bob coming back to your issue. Yep. So

848
01:40:06.300 --> 01:40:24.150
Open Mainframe Project Community: You've the thing you've referred here is from my first PLC. The 2017 on the Java code the scala code that I wrote you. You must have been referring over to the IBM safir dash

849
01:40:25.470 --> 01:40:32.820
Open Mainframe Project Community: Spark repository where it's missing from right because we haven't put this into the Geneva ERS spark packet. Yep. Yep.

850
01:40:33.870 --> 01:40:34.020
bobmcCormack: Yeah.

851
01:40:35.070 --> 01:40:54.420
Open Mainframe Project Community: And I do see that that code. I must have dropped that in building my repo. So I have the code in a prior repo. So I can put that. But I'd put it into the IBM Safford spark repositories right put that right because we haven't imported yet.

852
01:40:55.500 --> 01:41:11.250
Open Mainframe Project Community: ERS spark PLC. We do have approval from right from john martek to do that. Import to spark. Have you decided, are we going to clear out the safir

853
01:41:12.300 --> 01:41:15.390
Open Mainframe Project Community: The IBM SAFA repositories after we do the import

854
01:41:16.200 --> 01:41:22.950
bobmcCormack: In um yeah I think that'd be safer kip because we could drift don't drifting now.

855
01:41:22.980 --> 01:41:30.450
bobmcCormack: Done the clear out for GB be live. So, if you like, I could do the the spark PSC move

856
01:41:31.680 --> 01:41:33.270
Open Mainframe Project Community: About I fix this one piece.

857
01:41:33.690 --> 01:41:35.880
Open Mainframe Project Community: Or well. Now, why don't you go ahead and do the

858
01:41:36.450 --> 01:41:39.990
Open Mainframe Project Community: Do that and then I'll just fix it straight into Geneva ERS I

859
01:41:40.080 --> 01:41:47.760
Open Mainframe Project Community: Can think that'd be okay because issue. You've got is open. There I assigned it to myself. Yep. So I'll fix that in the

860
01:41:49.110 --> 01:41:50.280
Open Mainframe Project Community: In the PLC.

861
01:41:51.330 --> 01:41:51.660
bobmcCormack: Okay.

862
01:41:51.810 --> 01:41:53.610
bobmcCormack: Fair enough 10 years. Okay.

863
01:41:54.960 --> 01:42:00.900
bobmcCormack: Good over anybody else on the call wish to make a comment in regards to infrastructure, please.

864
01:42:02.310 --> 01:42:03.780
Sandy: Yeah, I have a question.

865
01:42:05.430 --> 01:42:07.680
Sandy: I know enough to be dangerous and that's about it.

866
01:42:09.240 --> 01:42:22.110
Sandy: When we do a build and we are going to implement it in a customer area or they're going to implement it, you know, one of the biggest problems they had was having to retest everything

867
01:42:23.820 --> 01:42:39.780
Sandy: Um, how do we, can we in any way, shape, or form minimize that while we're doing this build is there something additional we can do to be able to make it not so painful.

868
01:42:41.250 --> 01:42:44.310
Ian: Yeah, we have a set of regression tests.

869
01:42:45.840 --> 01:42:49.980
Ian: And the my thought. And I know Rob and I talked about this was

870
01:42:51.030 --> 01:43:02.460
Ian: extending our test framework to be not just the proving that the code kind of works to kind of give them a

871
01:43:04.080 --> 01:43:09.900
Ian: Hello world kind of setup so they can see

872
01:43:12.270 --> 01:43:14.730
Ian: They can get an example system basically

873
01:43:17.160 --> 01:43:22.470
Ian: With some example data and example views that would do stuff.

874
01:43:24.120 --> 01:43:27.540
Ian: Now the, the problem with any testing scheme is

875
01:43:28.740 --> 01:43:32.310
Ian: How much of the system doesn't really cover.

876
01:43:34.920 --> 01:43:41.790
Ian: I mean, and and and that's that's the thing about the scope of any regression testing.

877
01:43:42.990 --> 01:43:55.170
Ian: we recover our cold fairly well in terms of exercising the different models that are used under the covers, like

878
01:43:56.460 --> 01:44:00.180
Ian: I don't remember, but you end up with function codes.

879
01:44:01.260 --> 01:44:16.260
Ian: And the different function codes that get used. They get fairly well covered, but there are some interesting things happen with exits that we don't really cover terribly well we cover our existing common key exits.

880
01:44:17.490 --> 01:44:22.680
Ian: To some extent, there are fringe cases, there are some

881
01:44:25.320 --> 01:44:39.840
Ian: Interesting data issues that may be not covered as nicely as possible. But this is also is where other people can add things they can add new tests into our regression. Sweet.

882
01:44:40.320 --> 01:44:57.300
Ian: And exercise things that people find that go wrong. So from a customer's point of view, they can put it on their system run these regression tests and have a ideally a high degree of confidence that it's all working

883
01:44:59.730 --> 01:45:07.950
bobmcCormack: In that case, you know you thinking maybe a separate repo for that within the Geneva ERS setup.

884
01:45:08.520 --> 01:45:19.380
Ian: Yes. I think that was one of the proposals I had was the test framework as a separate thing. And again, you can hopefully run it from

885
01:45:20.460 --> 01:45:22.200
Ian: From Gretel. Yeah.

886
01:45:22.740 --> 01:45:31.980
Open Mainframe Project Community: You know, Sandy, just a comment there if we could get our customers to consider contributing certain conditions that they built

887
01:45:32.880 --> 01:45:41.520
Open Mainframe Project Community: Into this we start to leverage it will get across customers will get internally building up this test bed would become more effective.

888
01:45:43.170 --> 01:45:51.090
Open Mainframe Project Community: One of the key pieces of doing that in is you got to get data conditions right to test field widths and certain

889
01:45:51.840 --> 01:46:01.200
Open Mainframe Project Community: You know alphanumeric test and compared testing those kinds of things. And sometimes that can be a challenge. But if our if our customers were willing to consider.

890
01:46:01.770 --> 01:46:12.150
Open Mainframe Project Community: Doing some significant masking to any data that they have and helping us build up that data repository, this would become a significant asset and building out

891
01:46:13.980 --> 01:46:20.190
Ian: Sure. The problem is that our existing customers really run largely on

892
01:46:21.360 --> 01:46:29.520
Ian: A lot of their own exits as well. Yeah, I'm in their proprietary so we gotta get a system which is

893
01:46:31.320 --> 01:46:38.160
Ian: Kind of exit free improves what it does and how will we chain data and perform

894
01:46:40.830 --> 01:46:48.720
Ian: And that's the basics of our system. I'd love to see a system that we can feed into a spark world, but actually just from that point.

895
01:46:49.140 --> 01:46:54.270
Open Mainframe Project Community: If they're not changing their exits, then those don't require retesting and the

896
01:46:54.510 --> 01:47:03.690
Ian: Official yeah the interface between Geneva ERS and the exits, you know, places that we could build, test cases around this so that

897
01:47:03.840 --> 01:47:13.290
Open Mainframe Project Community: They have a sense of the perimeters of whatever we're delivering a new set of code has been tested, even if we don't include exit testing. Sure.

898
01:47:16.710 --> 01:47:20.160
Sandy: We've, we've we've decoupled.

899
01:47:21.300 --> 01:47:38.280
Sandy: The pieces enough that if they just upgrade the workbench. They don't have to retest over them if they just upgrade the compiler. They don't have to retest everything. I guess that's that's kind of the things that are running through my head right now. Well, that's pretty good feedback.

900
01:47:38.940 --> 01:47:43.920
Ian: What is the hope. Yes. Okay. The intention.

901
01:47:45.600 --> 01:47:51.270
Ian: As with anything. Obviously the Find all we missed out bit and we fix it.

902
01:47:52.350 --> 01:47:54.210
Ian: But that's the intention is that it's

903
01:47:55.230 --> 01:47:57.270
Ian: A test all the different bits and pieces.

904
01:47:59.790 --> 01:48:06.540
bobmcCormack: Thank you know it's good point. Sandy. And in that case, and I mean apart from the the batch side.

905
01:48:07.590 --> 01:48:12.270
bobmcCormack: We could implement some gooey type testing for the workbench. Couldn't be.

906
01:48:14.100 --> 01:48:19.710
Ian: That much more interesting and difficult. There are there are, we used to do.

907
01:48:21.660 --> 01:48:24.000
Ian: Some rational functional tests, which is

908
01:48:24.090 --> 01:48:24.960
Ian: Kind of a

909
01:48:26.970 --> 01:48:30.240
Ian: Screen Recording playback thing when they

910
01:48:30.420 --> 01:48:32.970
Ian: Click on buttons and dialogues and what have you. Yeah.

911
01:48:34.530 --> 01:48:39.360
Ian: But that's kind of gone gone disappeared a bit now.

912
01:48:40.500 --> 01:48:42.870
bobmcCormack: You're the machines in the junk ball at the moment.

913
01:48:43.290 --> 01:48:49.110
Ian: Yeah, the but what I'm hoping is that really the

914
01:48:49.800 --> 01:48:53.190
Ian: The design. And that's the intention of the design of

915
01:48:53.250 --> 01:48:58.980
Ian: The workbench, is that the layer that is the Giri is just a thin veneer across the top.

916
01:49:00.180 --> 01:49:03.900
Ian: The models and the code that does the actual work.

917
01:49:04.980 --> 01:49:23.160
Ian: Lives behind it and you can run all the tests all that stuff by our J unit test cases and really all the goodies adding for you is the fact that it provides text boxes and check boxes and stuff, but there is a whole state machine effectively and the gooey.

918
01:49:24.570 --> 01:49:28.410
Ian: That we can't really test program only very easily.

919
01:49:28.410 --> 01:49:37.560
Ian: Here the whole the whole thing of when you edit the file, then suddenly that save as button on the top left hand corner becomes enabled.

920
01:49:39.540 --> 01:49:41.760
Ian: Those kinds of things really arguably level.

921
01:49:43.680 --> 01:49:45.090
Ian: They're kind of hard to test

922
01:49:48.180 --> 01:49:49.920
bobmcCormack: You made a comment earlier about

923
01:49:51.390 --> 01:49:58.800
bobmcCormack: How I will. So, which is very put in, I think, instead of calling it a test framework, we really should call it a

924
01:50:00.060 --> 01:50:03.450
bobmcCormack: Hello World deployment or something, just to make it sound a bit sexier.

925
01:50:03.960 --> 01:50:04.590
Ian: Well, sure.

926
01:50:04.860 --> 01:50:07.200
Randall Ness: Installation verification process.

927
01:50:08.430 --> 01:50:10.020
Ian: Yeah, and

928
01:50:11.640 --> 01:50:14.760
Ian: Some derivative of our green sock database or something.

929
01:50:17.880 --> 01:50:18.630
Ian: As I call it

930
01:50:20.850 --> 01:50:21.090
bobmcCormack: Yep.

931
01:50:23.040 --> 01:50:23.370
bobmcCormack: Good.

932
01:50:25.020 --> 01:50:27.870
bobmcCormack: Anybody else for coming on infrastructure, please.

933
01:50:28.230 --> 01:50:31.380
Open Mainframe Project Community: Yeah. One more comment, going back to the spark piece.

934
01:50:32.430 --> 01:50:32.670
Yep.

935
01:50:33.780 --> 01:50:40.290
Open Mainframe Project Community: There is a I'm looking for the site, but there is a summary of

936
01:50:41.910 --> 01:50:47.280
Open Mainframe Project Community: Projects that show what the source code is primary source code for that.

937
01:50:49.380 --> 01:51:05.580
Open Mainframe Project Community: And if we we had decided before the the summit to not import the spark code because all of a sudden our project shows up as being primarily shell scripts Scala code.

938
01:51:07.050 --> 01:51:08.430
Open Mainframe Project Community: Significantly outweighs

939
01:51:09.630 --> 01:51:17.580
Open Mainframe Project Community: Any of the other languages we use in the project. I guess the question is back to the team. We had decided to delay that

940
01:51:18.240 --> 01:51:23.580
Open Mainframe Project Community: I don't know if it's worth the lane again because we are ready to bring in the spark code into our

941
01:51:24.390 --> 01:51:38.460
Open Mainframe Project Community: Our order. The, the, the scala and and Bash scripts into our project, even though it's going to skew. Our, our source code description for the overall project for some period of time until we get other things released. Is that a problem.

942
01:51:43.110 --> 01:51:45.570
Sandy: Until after the open mainframe summit.

943
01:51:47.370 --> 01:51:48.480
Sandy: And that's already happened.

944
01:51:48.870 --> 01:51:50.370
Open Mainframe Project Community: Yeah, that has yeah like

945
01:51:52.200 --> 01:51:53.100
Open Mainframe Project Community: Another comment. Sorry.

946
01:51:54.030 --> 01:51:54.510
bobmcCormack: We've got

947
01:51:55.890 --> 01:52:02.640
bobmcCormack: Flooded a all the GV be live stuff. So there's a bit of fair lines fair number of lines of assembler code.

948
01:52:04.980 --> 01:52:10.020
Open Mainframe Project Community: Yeah, this'll but the number of lines of code will significantly change. If you look at the the

949
01:52:11.070 --> 01:52:24.270
Open Mainframe Project Community: The IBM safir spark you have quite a few more lines of code there, it only be for a short period of time could be. Yeah, until we get other things released. It's not an issue than I am. Okay, doing the important part.

950
01:52:25.050 --> 01:52:29.730
bobmcCormack: Yeah, I mean, when you Jane pops his stuff in the details. Blown away as well.

951
01:52:29.970 --> 01:52:32.370
Open Mainframe Project Community: Yes, yes, yes.

952
01:52:33.480 --> 01:52:34.320
bobmcCormack: Okay, good. I

953
01:52:34.350 --> 01:52:36.630
Open Mainframe Project Community: Just wanted to verify and I think we're

954
01:52:37.890 --> 01:52:43.890
Ian: In terms of infrastructure. I know we briefly talked about this a while ago, Kip in that

955
01:52:46.110 --> 01:52:50.970
Ian: I'm unclear as to what it is we really need to do before we can

956
01:52:52.080 --> 01:52:56.820
Ian: Turn the handle and release all the say the Java code.

957
01:52:59.010 --> 01:52:59.490
Open Mainframe Project Community: Well, I think.

958
01:52:59.700 --> 01:53:04.020
Open Mainframe Project Community: So good. I think that the discussion I had was we

959
01:53:05.490 --> 01:53:06.780
Open Mainframe Project Community: Want to feel

960
01:53:08.370 --> 01:53:11.370
Open Mainframe Project Community: If I'm putting on my Jim lad chef ski hat here, right.

961
01:53:13.080 --> 01:53:27.240
Open Mainframe Project Community: And have confidence, we need to convince Jim and our customers that we have these processes figured out for where our code is maintained for supporting their applications.

962
01:53:27.780 --> 01:53:36.270
Open Mainframe Project Community: Because this is one of the weak points of actually just have to open. I'm going to show you a slide real quick and answer to that.

963
01:53:38.580 --> 01:53:43.950
Ian: I was thinking more in terms of the legalities of things and IBM

964
01:53:45.240 --> 01:53:48.030
Ian: copyright notices and all that stuff.

965
01:53:48.420 --> 01:53:52.260
Open Mainframe Project Community: Yeah, no, I think we as long as our Bob was clear on

966
01:53:52.260 --> 01:53:52.980
Open Mainframe Project Community: What the

967
01:53:55.050 --> 01:54:03.480
Open Mainframe Project Community: What the header files need to be they need to go our stuff needs to go through a an IBM safir lipo that can be scanned

968
01:54:04.590 --> 01:54:14.040
Open Mainframe Project Community: And once once open mainframe project to scan something, then we have permission to put it into the library.

969
01:54:14.070 --> 01:54:21.600
Ian: But we do need to do that. Yeah. Okay. And I think, yeah, the stuff in the open source will be well ahead of

970
01:54:24.330 --> 01:54:26.130
Ian: The customer code at the moment.

971
01:54:27.450 --> 01:54:40.320
Open Mainframe Project Community: Let me, let me just share this just briefly to make a point that I think may be helpful here, right, as I've been doing this research and I talked about this in my video. This little graphic here I think is very telling.

972
01:54:41.520 --> 01:55:00.810
Open Mainframe Project Community: That as this group did a survey 400 professional developers proprietary compared to the orange on open source, open source is so much better in so many fronts until we get to this point down here, reliable support and consulting services.

973
01:55:02.370 --> 01:55:15.600
Open Mainframe Project Community: And this is the place that we and the staff of world we get this we get what reliable support, looks like we don't want to lose that edge.

974
01:55:16.200 --> 01:55:26.490
Open Mainframe Project Community: That we've got there for our customers because they count on us. We want to then go push you know push this farther and making fixing the open source side of this

975
01:55:28.320 --> 01:55:33.060
Open Mainframe Project Community: That's our opportunity. It's a serious opportunity for us to do that do that right

976
01:55:35.910 --> 01:55:54.600
bobmcCormack: Will Randall rise that same issue during yesterday's call with the team, ensuring that we have a process of when we update source in get we don't lose that. And we need to keep the RTC in sync. Yes, processes there upon yeah yeah

977
01:56:00.510 --> 01:56:10.740
Open Mainframe Project Community: I think that the processes into your question specifically we have authority. And I think Bob clear on what the steps are for us to

978
01:56:11.730 --> 01:56:15.690
Open Mainframe Project Community: To release any of our code out to

979
01:56:17.010 --> 01:56:22.920
Open Mainframe Project Community: To the GV environment. There's nothing legally keeping us from doing that.

980
01:56:23.880 --> 01:56:24.120
Cool.

981
01:56:25.980 --> 01:56:28.050
Ian: My aim is to get get a view that

982
01:56:28.380 --> 01:56:39.030
Ian: I can create all some columns, some logic text hit the activate button and it'll do something in at that point, I'd like to kind of release it now.

983
01:56:39.300 --> 01:56:52.380
Open Mainframe Project Community: Good. Let me go further. We also have approval for a specific license from IBM. That is an evaluation license that can include see

984
01:56:54.510 --> 01:57:13.710
Open Mainframe Project Community: Jillian's got the work done to remove zips or maybe this evaluation license isn't really required about we have an ability to go put out executable files under a special IBM evaluation license that has very few restrictions for customers on that we build internally.

985
01:57:14.820 --> 01:57:19.110
Open Mainframe Project Community: And and they could download and begin using them immediately.

986
01:57:20.790 --> 01:57:29.220
Open Mainframe Project Community: So we've got a little bit of flexibility here and we can do that in, in, we don't have to have the whole greatest thing done and built

987
01:57:29.970 --> 01:57:42.000
Open Mainframe Project Community: If we can build it under our existing build processes and make an executable. That is a is equivalent functionally equivalent to what we're going to make an open source.

988
01:57:43.080 --> 01:57:45.780
Open Mainframe Project Community: We can put that out there for people to download and begin using

989
01:57:50.160 --> 01:57:58.530
bobmcCormack: Just on another question to you in or not a question but I'll send you examples of the copyright statements, you can put in each individual part

990
01:57:59.310 --> 01:58:12.060
bobmcCormack: As far as uploading to get you can when you get into getting I think you'd know there's any way you can point to adapt to a folder on your laptop, and then the copy all the paths cross accordingly.

991
01:58:14.970 --> 01:58:15.180
Ian: So,

992
01:58:16.320 --> 01:58:18.780
Eugene Morrow: Bob, can you send that to me as well. Sure.

993
01:58:23.970 --> 01:58:30.210
bobmcCormack: Okay. Oh, I think we've done infrastructure to death. No more questions last and final call

994
01:58:33.330 --> 01:58:35.760
bobmcCormack: Know. Excellent. Okay. Keep you can put the lid on it.

995
01:58:36.360 --> 01:58:49.050
Open Mainframe Project Community: Thank you, Bob. Thanks for running an effective meaning of the year. We're at the heart of of you guys are doing great. This is just, I love where we're going. Thanks for all your hard work and your intelligence commitment to this. Thanks for joining me.

996
01:58:51.390 --> 01:58:52.050
Eugene Morrow: Thank you. Kim.

997
01:58:52.680 --> 01:58:53.130
Open Mainframe Project Community: And Bob

998
01:58:54.180 --> 01:59:00.900
Open Mainframe Project Community: Bob, would you would you give us a good thought to start our next TASC meeting like Randall did today. Could you

999
01:59:01.290 --> 01:59:03.240
bobmcCormack: Very basic one. Yes.

1000
01:59:03.480 --> 01:59:08.190
bobmcCormack: Yeah, you know, I got to get free drinks of IBM at the new IBM office opening today.

1001
01:59:10.830 --> 01:59:11.070
Open Mainframe Project Community: So,

1002
01:59:11.250 --> 01:59:17.010
Open Mainframe Project Community: You can share how that went up the next the next TLC to get us started, that'd be great. Okay.

1003
01:59:17.070 --> 01:59:17.490
bobmcCormack: Good or bad

1004
01:59:18.840 --> 01:59:19.410
Open Mainframe Project Community: Excellent.

1005
01:59:19.830 --> 01:59:21.480
Open Mainframe Project Community: Thanks. Have a good day.

1006
01:59:23.940 --> 01:59:24.360
Eugene Morrow: Everyone

1007
01:59:24.810 --> 01:59:25.110
Bye.

